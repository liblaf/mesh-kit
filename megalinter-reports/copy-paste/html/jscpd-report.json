{
  "statistics": {
    "detectionDate": "2024-10-13T00:44:17.518Z",
    "formats": {
      "python": {
        "sources": {
          "exp/2024/10/01/registration/src/template/maxilla.py": {
            "lines": 47,
            "tokens": 451,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 451,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/01/registration/src/template/mandible.py": {
            "lines": 48,
            "tokens": 447,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 48,
            "duplicatedTokens": 447,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/01/registration/src/template/face.py": {
            "lines": 74,
            "tokens": 541,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 74,
            "duplicatedTokens": 541,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/registration/src/template/maxilla.py": {
            "lines": 47,
            "tokens": 451,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 451,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/registration/src/template/mandible.py": {
            "lines": 48,
            "tokens": 447,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 48,
            "duplicatedTokens": 447,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/registration/src/template/face.py": {
            "lines": 74,
            "tokens": 541,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 74,
            "duplicatedTokens": 541,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/template/src/face/transfer.py": {
            "lines": 20,
            "tokens": 178,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/template/src/face/rigid.py": {
            "lines": 48,
            "tokens": 378,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/transfer/maxilla.py": {
            "lines": 31,
            "tokens": 295,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 51,
            "duplicatedTokens": 466,
            "percentage": 164.52,
            "percentageTokens": 157.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/transfer/mandible.py": {
            "lines": 31,
            "tokens": 295,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 234,
            "percentage": 83.87,
            "percentageTokens": 79.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/transfer/face.py": {
            "lines": 29,
            "tokens": 291,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 25,
            "duplicatedTokens": 232,
            "percentage": 86.21,
            "percentageTokens": 79.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/cylinder/src/plot/solution.py": {
            "lines": 37,
            "tokens": 364,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 41,
            "duplicatedTokens": 501,
            "percentage": 110.81,
            "percentageTokens": 137.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/cylinder/src/plot/input.py": {
            "lines": 24,
            "tokens": 198,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 138,
            "percentage": 58.33,
            "percentageTokens": 69.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/cylinder/src/plot/camera.py": {
            "lines": 26,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/linear-vs-hyper/src/plot/solution.py": {
            "lines": 47,
            "tokens": 472,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 176,
            "percentage": 23.4,
            "percentageTokens": 37.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/linear-vs-hyper/src/plot/input.py": {
            "lines": 25,
            "tokens": 208,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 39,
            "duplicatedTokens": 346,
            "percentage": 156,
            "percentageTokens": 166.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/linear-vs-hyper/src/plot/camera.py": {
            "lines": 29,
            "tokens": 235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/plot/volume.py": {
            "lines": 25,
            "tokens": 254,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/plot/time.py": {
            "lines": 23,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/plot/solution.py": {
            "lines": 41,
            "tokens": 400,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 325,
            "percentage": 73.17,
            "percentageTokens": 81.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/plot/input.py": {
            "lines": 25,
            "tokens": 208,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 208,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/plot/camera.py": {
            "lines": 30,
            "tokens": 224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/constitutive/src/plot/tet.py": {
            "lines": 30,
            "tokens": 305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/constitutive/src/plot/curve.py": {
            "lines": 118,
            "tokens": 1256,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 52,
            "duplicatedTokens": 680,
            "percentage": 44.07,
            "percentageTokens": 54.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/non_rigid/amberg_pytorch3d/_params.py": {
            "lines": 156,
            "tokens": 1557,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 24,
            "duplicatedTokens": 342,
            "percentage": 15.38,
            "percentageTokens": 21.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/non_rigid/amberg_pytorch3d/_main.py": {
            "lines": 215,
            "tokens": 2236,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/non_rigid/amberg_pytorch3d/_local_affine.py": {
            "lines": 43,
            "tokens": 577,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/07/fpfh/src/main.py": {
            "lines": 65,
            "tokens": 570,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/01/registration/src/tetgen.py": {
            "lines": 97,
            "tokens": 991,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 373,
            "percentage": 41.24,
            "percentageTokens": 37.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/01/registration/src/simulate.py": {
            "lines": 59,
            "tokens": 651,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 38,
            "duplicatedTokens": 559,
            "percentage": 64.41,
            "percentageTokens": 85.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/01/registration/src/register.py": {
            "lines": 198,
            "tokens": 1655,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 94,
            "duplicatedTokens": 840,
            "percentage": 47.47,
            "percentageTokens": 50.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/01/registration/src/plot.py": {
            "lines": 50,
            "tokens": 358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/10/01/registration/src/eval.py": {
            "lines": 99,
            "tokens": 979,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-maxilla/src/transfer.py": {
            "lines": 32,
            "tokens": 257,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 64,
            "duplicatedTokens": 512,
            "percentage": 200,
            "percentageTokens": 199.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-maxilla/src/rigid.py": {
            "lines": 48,
            "tokens": 459,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 57,
            "duplicatedTokens": 507,
            "percentage": 118.75,
            "percentageTokens": 110.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-maxilla/src/non-rigid.py": {
            "lines": 52,
            "tokens": 471,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 65,
            "duplicatedTokens": 535,
            "percentage": 125,
            "percentageTokens": 113.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-mandible/src/transfer.py": {
            "lines": 32,
            "tokens": 257,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 256,
            "percentage": 100,
            "percentageTokens": 99.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-mandible/src/rigid.py": {
            "lines": 50,
            "tokens": 457,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 46,
            "duplicatedTokens": 385,
            "percentage": 92,
            "percentageTokens": 84.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-mandible/src/non-rigid.py": {
            "lines": 54,
            "tokens": 469,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 51,
            "duplicatedTokens": 405,
            "percentage": 94.44,
            "percentageTokens": 86.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-face/src/transfer.py": {
            "lines": 32,
            "tokens": 257,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 256,
            "percentage": 100,
            "percentageTokens": 99.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-face/src/rigid.py": {
            "lines": 72,
            "tokens": 632,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 45,
            "duplicatedTokens": 362,
            "percentage": 62.5,
            "percentageTokens": 57.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-face/src/params.py": {
            "lines": 122,
            "tokens": 1189,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 24,
            "duplicatedTokens": 342,
            "percentage": 19.67,
            "percentageTokens": 28.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/template-face/src/non-rigid.py": {
            "lines": 76,
            "tokens": 645,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 48,
            "duplicatedTokens": 370,
            "percentage": 63.16,
            "percentageTokens": 57.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/registration/src/tetgen.py": {
            "lines": 70,
            "tokens": 670,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 373,
            "percentage": 57.14,
            "percentageTokens": 55.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/registration/src/register.py": {
            "lines": 153,
            "tokens": 1280,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 94,
            "duplicatedTokens": 840,
            "percentage": 61.44,
            "percentageTokens": 65.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/25/io-obj/src/main.py": {
            "lines": 89,
            "tokens": 990,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 54,
            "duplicatedTokens": 665,
            "percentage": 60.67,
            "percentageTokens": 67.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/registration/src/rigid.py": {
            "lines": 31,
            "tokens": 271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/registration/src/global.py": {
            "lines": 59,
            "tokens": 676,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/organize-ct/src/rigid.py": {
            "lines": 61,
            "tokens": 607,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/organize-ct/src/organize-CT.py": {
            "lines": 89,
            "tokens": 836,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 87,
            "percentage": 12.36,
            "percentageTokens": 10.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/organize-ct/src/CT-to-mesh.py": {
            "lines": 31,
            "tokens": 327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/nricp/src/main.py": {
            "lines": 17,
            "tokens": 148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/wrap.py": {
            "lines": 12,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/template.py": {
            "lines": 19,
            "tokens": 153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/rigid.py": {
            "lines": 34,
            "tokens": 304,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 207,
            "percentage": 76.47,
            "percentageTokens": 68.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/face.py": {
            "lines": 31,
            "tokens": 280,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 207,
            "percentage": 83.87,
            "percentageTokens": 73.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/convert.py": {
            "lines": 28,
            "tokens": 263,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/12/faceform/src/CT-to-mesh.py": {
            "lines": 19,
            "tokens": 181,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/template/src/main.py": {
            "lines": 145,
            "tokens": 1404,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/template/src/hello-ict.py": {
            "lines": 29,
            "tokens": 212,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/register/src/hello.py": {
            "lines": 4,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/register/src/align.py": {
            "lines": 33,
            "tokens": 290,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/register/src/CT-to-mesh.py": {
            "lines": 26,
            "tokens": 207,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/real-data/src/prepare.py": {
            "lines": 70,
            "tokens": 725,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/real-data/src/main.py": {
            "lines": 45,
            "tokens": 472,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 34,
            "duplicatedTokens": 384,
            "percentage": 75.56,
            "percentageTokens": 81.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/real-data/src/eval.py": {
            "lines": 49,
            "tokens": 508,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/cylinder/src/solve.py": {
            "lines": 38,
            "tokens": 359,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 283,
            "percentage": 78.95,
            "percentageTokens": 78.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/09/01/cylinder/src/gen.py": {
            "lines": 53,
            "tokens": 652,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 42,
            "duplicatedTokens": 692,
            "percentage": 79.25,
            "percentageTokens": 106.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/linear-vs-hyper/src/main.py": {
            "lines": 145,
            "tokens": 1586,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 181,
            "duplicatedTokens": 2023,
            "percentage": 124.83,
            "percentageTokens": 127.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/linear-vs-hyper/src/info.py": {
            "lines": 16,
            "tokens": 112,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 112,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/linear-vs-hyper/src/gen.py": {
            "lines": 33,
            "tokens": 388,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 176,
            "percentage": 24.24,
            "percentageTokens": 45.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/elasticity/src/plot-stress.py": {
            "lines": 135,
            "tokens": 1713,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 106,
            "duplicatedTokens": 1381,
            "percentage": 78.52,
            "percentageTokens": 80.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/elasticity/src/neo-hookean.py": {
            "lines": 161,
            "tokens": 1522,
            "sources": 1,
            "clones": 18,
            "duplicatedLines": 636,
            "duplicatedTokens": 5982,
            "percentage": 395.03,
            "percentageTokens": 393.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/elasticity/src/neo-hookean-2.py": {
            "lines": 162,
            "tokens": 1526,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 148,
            "duplicatedTokens": 1356,
            "percentage": 91.36,
            "percentageTokens": 88.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/elasticity/src/linear.py": {
            "lines": 162,
            "tokens": 1535,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 148,
            "duplicatedTokens": 1399,
            "percentage": 91.36,
            "percentageTokens": 91.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/elasticity/src/linear-spsolve.py": {
            "lines": 202,
            "tokens": 1980,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 153,
            "duplicatedTokens": 1443,
            "percentage": 75.74,
            "percentageTokens": 72.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/elasticity/src/gen.py": {
            "lines": 60,
            "tokens": 663,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 158,
            "percentage": 20,
            "percentageTokens": 23.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/elasticity/src/E-nu-to-lambda-mu.py": {
            "lines": 26,
            "tokens": 228,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 158,
            "percentage": 46.15,
            "percentageTokens": 69.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/main.py": {
            "lines": 144,
            "tokens": 1562,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 144,
            "duplicatedTokens": 1562,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/info.py": {
            "lines": 16,
            "tokens": 112,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 112,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/08/07/cylinder/src/gen.py": {
            "lines": 53,
            "tokens": 652,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 34,
            "duplicatedTokens": 516,
            "percentage": 64.15,
            "percentageTokens": 79.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/07/10/nonhomogeneous/src/plot.py": {
            "lines": 24,
            "tokens": 317,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 152,
            "percentage": 50,
            "percentageTokens": 47.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py": {
            "lines": 189,
            "tokens": 1922,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 186,
            "duplicatedTokens": 1821,
            "percentage": 98.41,
            "percentageTokens": 94.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous-plot.py": {
            "lines": 18,
            "tokens": 233,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 152,
            "percentage": 66.67,
            "percentageTokens": 65.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exp/2024/07/10/nonhomogeneous/src/main.py": {
            "lines": 185,
            "tokens": 1842,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 183,
            "duplicatedTokens": 1810,
            "percentage": 98.92,
            "percentageTokens": 98.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/energy/elastic/_wikipedia.py": {
            "lines": 40,
            "tokens": 508,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 55,
            "duplicatedTokens": 453,
            "percentage": 137.5,
            "percentageTokens": 89.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/energy/elastic/_presets.py": {
            "lines": 53,
            "tokens": 417,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/energy/elastic/_chen.py": {
            "lines": 88,
            "tokens": 915,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 56,
            "duplicatedTokens": 636,
            "percentage": 63.64,
            "percentageTokens": 69.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/cell/tetra/_volume.py": {
            "lines": 9,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/cell/tetra/_strain.py": {
            "lines": 35,
            "tokens": 372,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/cell/tetra/_grad.py": {
            "lines": 10,
            "tokens": 165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/rigid/_trimesh.py": {
            "lines": 48,
            "tokens": 437,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 96,
            "percentage": 12.5,
            "percentageTokens": 21.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/rigid/_result.py": {
            "lines": 8,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/rigid/_main.py": {
            "lines": 65,
            "tokens": 637,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 96,
            "percentage": 9.23,
            "percentageTokens": 15.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/rigid/_abc.py": {
            "lines": 15,
            "tokens": 125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/preprocess/_sample.py": {
            "lines": 38,
            "tokens": 423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/preprocess/_mask.py": {
            "lines": 15,
            "tokens": 158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/preprocess/_estimate.py": {
            "lines": 26,
            "tokens": 250,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/non_rigid/_result.py": {
            "lines": 7,
            "tokens": 39,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/non_rigid/_main.py": {
            "lines": 7,
            "tokens": 59,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/non_rigid/_abc.py": {
            "lines": 7,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/global_/_result.py": {
            "lines": 10,
            "tokens": 59,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/global_/_open3d.py": {
            "lines": 85,
            "tokens": 648,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/registration/global_/_main.py": {
            "lines": 55,
            "tokens": 573,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tests/physics/elastic/test_linear.py": {
            "lines": 77,
            "tokens": 908,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tests/physics/cell/test_tetra.py": {
            "lines": 12,
            "tokens": 163,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/tests/math/sparse/test_mask.py": {
            "lines": 40,
            "tokens": 413,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/text/_strip_comments.py": {
            "lines": 9,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/serialize/_yaml.py": {
            "lines": 19,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/serialize/_toml.py": {
            "lines": 17,
            "tokens": 168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/serialize/_pydantic.py": {
            "lines": 20,
            "tokens": 201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/serialize/_main.py": {
            "lines": 41,
            "tokens": 378,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/serialize/_json.py": {
            "lines": 16,
            "tokens": 139,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/live/_live.py": {
            "lines": 103,
            "tokens": 938,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/iter/_sequence.py": {
            "lines": 33,
            "tokens": 346,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/iter/_mapping.py": {
            "lines": 16,
            "tokens": 166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/utils/func/_kwargs.py": {
            "lines": 27,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/torch/_utils.py": {
            "lines": 11,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/torch/_types.py": {
            "lines": 26,
            "tokens": 329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/torch/_export.py": {
            "lines": 58,
            "tokens": 247,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 140,
            "duplicatedTokens": 598,
            "percentage": 241.38,
            "percentageTokens": 242.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/numpy/_utils.py": {
            "lines": 11,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/numpy/_types.py": {
            "lines": 26,
            "tokens": 333,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/numpy/_export.py": {
            "lines": 58,
            "tokens": 247,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 58,
            "duplicatedTokens": 247,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/jax/_utils.py": {
            "lines": 11,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/jax/_types.py": {
            "lines": 26,
            "tokens": 329,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 23,
            "duplicatedTokens": 310,
            "percentage": 88.46,
            "percentageTokens": 94.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/jax/_export.py": {
            "lines": 58,
            "tokens": 247,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 58,
            "duplicatedTokens": 247,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/array/_utils.py": {
            "lines": 8,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/array/_types.py": {
            "lines": 29,
            "tokens": 314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/model/_problem.py": {
            "lines": 107,
            "tokens": 1194,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 367,
            "percentage": 28.97,
            "percentageTokens": 30.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/model/_model.py": {
            "lines": 130,
            "tokens": 1261,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/model/_hess.py": {
            "lines": 12,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/physics/energy/_abc.py": {
            "lines": 112,
            "tokens": 1054,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 33,
            "duplicatedTokens": 451,
            "percentage": 29.46,
            "percentageTokens": 42.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/transform/_normalize.py": {
            "lines": 57,
            "tokens": 280,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/transfer/_surface_to_volume.py": {
            "lines": 36,
            "tokens": 377,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/transfer/_surface_to_surface.py": {
            "lines": 14,
            "tokens": 130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/transfer/_nearest.py": {
            "lines": 59,
            "tokens": 616,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 36,
            "duplicatedTokens": 381,
            "percentage": 61.02,
            "percentageTokens": 61.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/transfer/_barycentric.py": {
            "lines": 61,
            "tokens": 651,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 195,
            "percentage": 29.51,
            "percentageTokens": 29.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/transfer/_auto.py": {
            "lines": 97,
            "tokens": 867,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 42,
            "duplicatedTokens": 378,
            "percentage": 43.3,
            "percentageTokens": 43.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/transfer/_abc.py": {
            "lines": 17,
            "tokens": 166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/select/_group.py": {
            "lines": 45,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/sample/_surface.py": {
            "lines": 36,
            "tokens": 382,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/point/_point_to_index.py": {
            "lines": 13,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ops/attr/_cell_to_point.py": {
            "lines": 19,
            "tokens": 216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/math/sparse/_mask.py": {
            "lines": 23,
            "tokens": 334,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/math/python/_cast.py": {
            "lines": 12,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/math/numpy/_cast.py": {
            "lines": 26,
            "tokens": 315,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/math/jax/_polar.py": {
            "lines": 17,
            "tokens": 146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/math/jax/_invariants.py": {
            "lines": 11,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/math/jax/_frobenius.py": {
            "lines": 9,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/trimesh/_trimesh.py": {
            "lines": 28,
            "tokens": 258,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/pyvista/_unstructured_grid.py": {
            "lines": 30,
            "tokens": 308,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/pyvista/_poly_data.py": {
            "lines": 84,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/pyvista/_obj.py": {
            "lines": 85,
            "tokens": 951,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 54,
            "duplicatedTokens": 665,
            "percentage": 63.53,
            "percentageTokens": 69.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/pytorch3d/_meshes.py": {
            "lines": 27,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/open3d/_point_cloud.py": {
            "lines": 29,
            "tokens": 259,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/dicom/_meta.py": {
            "lines": 24,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/dicom/_dicom.py": {
            "lines": 96,
            "tokens": 863,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 87,
            "percentage": 11.46,
            "percentageTokens": 10.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ext/wrap/_fast_wrapping.py": {
            "lines": 7,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ext/sculptor/template.py": {
            "lines": 34,
            "tokens": 291,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ext/ict_facekit/_topology.py": {
            "lines": 85,
            "tokens": 787,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ext/ict_facekit/_facekit.py": {
            "lines": 66,
            "tokens": 642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/creation/tet/_tetrahedron.py": {
            "lines": 16,
            "tokens": 201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/creation/tet/_cylinder.py": {
            "lines": 8,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/creation/tet/_box.py": {
            "lines": 12,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/jax.py": {
            "lines": 106,
            "tokens": 658,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 47,
            "duplicatedTokens": 414,
            "percentage": 44.34,
            "percentageTokens": 62.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/_utils.py": {
            "lines": 58,
            "tokens": 533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/typing/_geometry.py": {
            "lines": 20,
            "tokens": 156,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/plot/_camera.py": {
            "lines": 40,
            "tokens": 354,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/logging/_log_time.py": {
            "lines": 20,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/logging/_init.py": {
            "lines": 23,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/logging/_handler.py": {
            "lines": 23,
            "tokens": 198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/_typing.py": {
            "lines": 27,
            "tokens": 203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/_save.py": {
            "lines": 23,
            "tokens": 255,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/io/_register.py": {
            "lines": 49,
            "tokens": 474,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ext/_tetwild.py": {
            "lines": 10,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/ext/_tetgen.py": {
            "lines": 20,
            "tokens": 194,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/cli/_run.py": {
            "lines": 37,
            "tokens": 364,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/mkit/cli/_config.py": {
            "lines": 25,
            "tokens": 189,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/gen-ref-pages.py": {
            "lines": 37,
            "tokens": 449,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/fullnames.py": {
            "lines": 30,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 8960,
          "tokens": 85936,
          "sources": 180,
          "clones": 106,
          "duplicatedLines": 2175,
          "duplicatedTokens": 20950,
          "percentage": 24.27,
          "percentageTokens": 24.38,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 8960,
      "tokens": 85936,
      "sources": 180,
      "clones": 106,
      "duplicatedLines": 2175,
      "duplicatedTokens": 20950,
      "percentage": 24.27,
      "percentageTokens": 24.38,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "python",
      "lines": 48,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport pydantic\nimport scipy.spatial\n\nimport mkit\nimport mkit.typing.numpy as nt\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n\nclass Config(mkit.cli.BaseConfig):\n    template: pydantic.FilePath = Path(\n        \"/home/liblaf/Documents/data/template/maxilla.vtp\"\n    )\n    mandible: pydantic.FilePath = Path(\n        \"/home/liblaf/Documents/data/template/mandible.vtp\"\n    )\n    output: Path = Path(\"data/template/maxilla.vtp\")\n\n\nGROUP_NAMES_FREE: list[str] = [\"nostrils\", \"upperTeeth\"]\nGROUP_NAMES_FITTING: list[str] = [\"eyeSockets\", \"skull\"]\n\n\ndef main(cfg: Config) -> None:\n    maxilla: pv.PolyData = mkit.io.pyvista.load_poly_data(cfg.template)\n    mandible: pv.PolyData = mkit.io.pyvista.load_poly_data(cfg.mandible)\n    weight: nt.FN = np.zeros((maxilla.n_faces_strict,))\n    weight[mkit.ops.select.select_by_group_names(GROUP_NAMES_FREE, mesh=maxilla)] = 0.1\n    weight[mkit.ops.select.select_by_group_names(GROUP_NAMES_FITTING, mesh=maxilla)] = (\n        1.0\n    )\n    maxilla.point_data.update(\n        mkit.ops.attr.cell_data_to_point_data(maxilla, {\"Weight\": weight})\n    )\n    kdtree: scipy.spatial.KDTree = scipy.spatial.KDTree(mandible.points)\n    dist: nt.FN\n    dist, _idx = kdtree.query(maxilla.points)\n    maxilla.point_data[\"Weight\"][dist < 0.02 * maxilla.length] = 0.0\n    maxilla.rotate_x(180, inplace=True)\n    mkit.io.save(maxilla, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/template/maxilla.py",
        "start": 1,
        "end": 48,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 451
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/template/maxilla.py",
        "start": 1,
        "end": 48,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 48,
          "column": 2,
          "position": 451
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport pydantic\nimport scipy\nimport scipy.spatial\n\nimport mkit\nimport mkit.typing.numpy as nt\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n\nclass Config(mkit.cli.BaseConfig):\n    template: pydantic.FilePath = Path(\n        \"/home/liblaf/Documents/data/template/mandible.vtp\"\n    )\n    maxilla: pydantic.FilePath = Path(\n        \"/home/liblaf/Documents/data/template/maxilla.vtp\"\n    )\n    output: Path = Path(\"data/template/mandible.vtp\")\n\n\nGROUP_NAMES_FREE: list[str] = [\"lowerTeeth\"]\nGROUP_NAMES_FITTING: list[str] = [\"jaw\"]\n\n\ndef main(cfg: Config) -> None:\n    mandible: pv.PolyData = mkit.io.pyvista.load_poly_data(cfg.template)\n    maxilla: pv.PolyData = mkit.io.pyvista.load_poly_data(cfg.maxilla)\n    weight: nt.FN = np.zeros((mandible.n_faces_strict,))\n    weight[mkit.ops.select.select_by_group_names(GROUP_NAMES_FREE, mesh=mandible)] = 0.1\n    weight[\n        mkit.ops.select.select_by_group_names(GROUP_NAMES_FITTING, mesh=mandible)\n    ] = 1.0\n    mandible.point_data.update(\n        mkit.ops.attr.cell_data_to_point_data(mandible, {\"Weight\": weight})\n    )\n    kdtree: scipy.spatial.KDTree = scipy.spatial.KDTree(maxilla.points)\n    dist: nt.FN\n    dist, _idx = kdtree.query(mandible.points)\n    mandible.point_data[\"Weight\"][dist < 0.03 * mandible.length] = 0.0\n    mandible.rotate_x(180, inplace=True)\n    mkit.io.save(mandible, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/template/mandible.py",
        "start": 1,
        "end": 49,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 447
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/template/mandible.py",
        "start": 1,
        "end": 49,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 447
        }
      }
    },
    {
      "format": "python",
      "lines": 75,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport pydantic\n\nimport mkit\nimport mkit.typing.numpy as nt\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n\nclass Config(mkit.cli.BaseConfig):\n    template: pydantic.FilePath = Path(\"/home/liblaf/Documents/data/template/face.vtp\")\n    output: Path = Path(\"data/template/face.vtp\")\n\n\nGROUP_NAMES_REMOVE: list[str] = [\n    \"EyeSocketBottom\",\n    \"EyeSocketTop\",\n    \"MouthSocketBottom\",\n    \"MouthSocketTop\",\n]\nGROUP_NAMES_FREE: list[str] = [\n    \"EarSocket\",\n    \"LipInnerBottom\",\n    \"LipInnerTop\",\n    \"Nostril\",\n]\nGROUP_NAMES_WEAK: list[str] = [\n    \"Ear\",\n    \"EarNeckBack\",\n]\nGROUP_NAMES_PARTIAL: list[str] = [\n    \"HeadBack\",\n    \"NeckBack\",\n    \"NeckFront\",\n]\nGROUP_NAMES_FITTING: list[str] = [\n    \"Caruncle\",\n    \"Chin\",\n    \"EyelidBottom\",\n    \"EyelidInnerBottom\",\n    \"EyelidInnerTop\",\n    \"EyelidOuterBottom\",\n    \"EyelidOuterTop\",\n    \"EyelidTop\",\n    \"Face\",\n    \"LipBottom\",\n    \"LipOuterBottom\",\n    \"LipOuterTop\",\n    \"LipTop\",\n]\n\n\ndef main(cfg: Config) -> None:\n    face: pv.PolyData = mkit.io.pyvista.load_poly_data(cfg.template)\n    face.remove_cells(\n        mkit.ops.select.select_by_group_names(GROUP_NAMES_REMOVE, mesh=face),\n        inplace=True,\n    )\n    weight: nt.FN = np.zeros((face.n_faces_strict,))\n    weight[mkit.ops.select.select_by_group_names(GROUP_NAMES_FREE, mesh=face)] = 0.0\n    weight[mkit.ops.select.select_by_group_names(GROUP_NAMES_WEAK, mesh=face)] = 0.1\n    weight[mkit.ops.select.select_by_group_names(GROUP_NAMES_PARTIAL, mesh=face)] = 0.4\n    weight[mkit.ops.select.select_by_group_names(GROUP_NAMES_FITTING, mesh=face)] = 1.0\n    face.point_data.update(\n        mkit.ops.attr.cell_data_to_point_data(face, {\"Weight\": weight})\n    )\n    face.rotate_x(180, inplace=True)\n    mkit.io.save(face, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/template/face.py",
        "start": 1,
        "end": 75,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 541
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/template/face.py",
        "start": 1,
        "end": 75,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 75,
          "column": 2,
          "position": 541
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "import pyvista as pv\nimport scipy.spatial\n\nimport mkit\nimport mkit.typing.numpy as nt\n\n\nclass Config(mkit.cli.BaseConfig):\n    pass\n\n\ndef main(cfg: Config) -> None:\n    source: pv.PolyData = mkit.io.pyvista.read_poly_data(\n        \"data/registration/mandible.obj\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/mandible.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 33,
          "position": 86
        }
      },
      "secondFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/maxilla.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 32,
          "position": 86
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n\n\ndef transfer_cell_data(source: pv.PolyData, target: pv.PolyData) -> pv.PolyData:\n    source_cell_centers: pv.PolyData = source.cell_centers()\n    target_cell_centers: pv.PolyData = target.cell_centers()\n    kdtree: scipy.spatial.KDTree = scipy.spatial.KDTree(source_cell_centers.points)\n    idx: nt.IN\n    _dist, idx = kdtree.query(target_cell_centers.points)\n    target.cell_data[\"GroupIds\"] = source_cell_centers.point_data[\"GroupIds\"][idx]\n    return target\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/mandible.py",
        "start": 19,
        "end": 32,
        "startLoc": {
          "line": 19,
          "column": 29,
          "position": 147
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 295
        }
      },
      "secondFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/maxilla.py",
        "start": 19,
        "end": 32,
        "startLoc": {
          "line": 19,
          "column": 28,
          "position": 147
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 295
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "import pyvista as pv\nimport scipy.spatial\n\nimport mkit\nimport mkit.typing.numpy as nt\n\n\nclass Config(mkit.cli.BaseConfig):\n    pass\n\n\ndef main(cfg: Config) -> None:\n    source: pv.PolyData = mkit.io.pyvista.read_poly_data(\"data/registration/face.obj\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/face.py",
        "start": 1,
        "end": 13,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 13,
          "column": 29,
          "position": 84
        }
      },
      "secondFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/maxilla.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 32,
          "position": 86
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n\n\ndef transfer_cell_data(source: pv.PolyData, target: pv.PolyData) -> pv.PolyData:\n    source_cell_centers: pv.PolyData = source.cell_centers()\n    target_cell_centers: pv.PolyData = target.cell_centers()\n    kdtree: scipy.spatial.KDTree = scipy.spatial.KDTree(source_cell_centers.points)\n    idx: nt.IN\n    _dist, idx = kdtree.query(target_cell_centers.points)\n    target.cell_data[\"GroupIds\"] = source_cell_centers.point_data[\"GroupIds\"][idx]\n    return target\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/face.py",
        "start": 17,
        "end": 30,
        "startLoc": {
          "line": 17,
          "column": 25,
          "position": 143
        },
        "endLoc": {
          "line": 30,
          "column": 2,
          "position": 291
        }
      },
      "secondFile": {
        "name": "exp/2024/09/12/faceform/src/transfer/maxilla.py",
        "start": 19,
        "end": 32,
        "startLoc": {
          "line": 19,
          "column": 28,
          "position": 147
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 295
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "def main(cfg: Config) -> None:\n    mesh: pv.UnstructuredGrid = pv.read(cfg.solution)\n    execution_time: float = np.asarray(mesh.field_data[\"execution_time\"]).item()\n    volume_rest: float = mesh.volume\n    mesh.warp_by_vector(\"solution\", inplace=True, progress_bar=True)\n    relative_volume_change: float = mesh.volume / volume_rest\n    pl: pv.Plotter = pv.Plotter(off_screen=True)\n    pl.add_axes()  # pyright: ignore [reportCallIssue]\n    pl.add_mesh(mesh, scalars=\"energy_density\")\n    if cfg.camera is not None:\n        mkit.plot.load_camera(pl, cfg.camera)\n    else",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/plot/solution.py",
        "start": 17,
        "end": 28,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 96
        },
        "endLoc": {
          "line": 28,
          "column": 5,
          "position": 272
        }
      },
      "secondFile": {
        "name": "exp/2024/09/01/cylinder/src/plot/solution.py",
        "start": 15,
        "end": 26,
        "startLoc": {
          "line": 15,
          "column": 1,
          "position": 72
        },
        "endLoc": {
          "line": 26,
          "column": 3,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "Path\n\n\ndef main(cfg: Config) -> None:\n    mesh: pv.UnstructuredGrid = pv.read(cfg.input)\n    pl: pv.Plotter = pv.Plotter(off_screen=True)\n    pl.add_axes()  # pyright: ignore [reportCallIssue]\n    pl.add_mesh(mesh, color=\"white\")\n    if cfg.camera is not None:\n        mkit.plot.load_camera(pl, cfg.camera)\n    pl.save_graphic(cfg.fig)\n\n\nif __name__ == \"__main__\":\n    mkit.cli.run(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/plot/input.py",
        "start": 12,
        "end": 26,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 70
        },
        "endLoc": {
          "line": 26,
          "column": 2,
          "position": 208
        }
      },
      "secondFile": {
        "name": "exp/2024/09/01/cylinder/src/plot/input.py",
        "start": 11,
        "end": 25,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 60
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 198
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "Path\n\n\ndef main(cfg: Config) -> None:\n    mesh: pv.UnstructuredGrid = pv.read(cfg.solution)\n    execution_time: float = np.asarray(mesh.field_data[\"execution_time\"]).item()\n    volume_rest: float = mesh.volume\n    mesh.warp_by_vector(\"solution\", inplace=True, progress_bar=True)\n    relative_volume_change: float = mesh.volume / volume_rest\n    pl: pv.Plotter = pv.Plotter(off_screen=True)\n    pl.add_axes()  # pyright: ignore [reportCallIssue]\n    pl.add_mesh(mesh, scalars=\"energy_density\")\n    if cfg.camera is not None:\n        mkit.plot.load_camera(pl, cfg.camera)\n    else:\n        camera: pv.Camera = pl.camera\n        camera.tight(0.1)\n    pl",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/cylinder/src/plot/solution.py",
        "start": 13,
        "end": 30,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 78
        },
        "endLoc": {
          "line": 30,
          "column": 3,
          "position": 284
        }
      },
      "secondFile": {
        "name": "exp/2024/09/01/cylinder/src/plot/solution.py",
        "start": 12,
        "end": 31,
        "startLoc": {
          "line": 12,
          "column": 2,
          "position": 68
        },
        "endLoc": {
          "line": 31,
          "column": 3,
          "position": 298
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n    pl.add_text(\n        f\"Relative Volume Change: {relative_volume_change:.2f}\",\n        position=(0, pl.window_size[1] - 1 * 18 * 2),  # pyright: ignore [reportArgumentType]\n    )\n    pl.add_text(\n        f\"Execution Time: {execution_time:.1f} s\",\n        position=(0, pl.window_size[1] - 2 * 18 * 2),  # pyright: ignore [reportArgumentType]\n    )\n    pl.save_graphic(cfg.fig)\n\n\nif __name__ == \"__main__\":\n    mkit.cli.run(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/cylinder/src/plot/solution.py",
        "start": 29,
        "end": 42,
        "startLoc": {
          "line": 29,
          "column": 4,
          "position": 281
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 400
        }
      },
      "secondFile": {
        "name": "exp/2024/09/01/cylinder/src/plot/solution.py",
        "start": 25,
        "end": 38,
        "startLoc": {
          "line": 25,
          "column": 7,
          "position": 245
        },
        "endLoc": {
          "line": 38,
          "column": 2,
          "position": 364
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "import pathlib\n\nimport pyvista as pv\n\nimport mkit.cli\nimport mkit.plot\n\n\nclass Config(mkit.cli.BaseConfig):\n    camera: pathlib.Path | None = None\n    fig: pathlib.Path\n    input: pathlib.Path\n\n\ndef main(cfg: Config) -> None:\n    mesh: pv.UnstructuredGrid = pv.read(cfg.input)\n    pl: pv.Plotter = pv.Plotter(off_screen=True)\n    pl.add_axes()  # pyright: ignore [reportCallIssue]\n    pl.add_mesh(mesh, color=\"white\")\n    if cfg.camera is not None:\n        mkit.plot.load_camera(pl, cfg.camera)\n    pl.save_graphic(cfg.fig)\n\n\nif __name__ == \"__main__\":\n    mkit.cli.run(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/cylinder/src/plot/input.py",
        "start": 1,
        "end": 26,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 26,
          "column": 2,
          "position": 208
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/plot/input.py",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 198
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "(\n    x: jxt.ArrayLike,\n    energy_fn: CellEnergy,\n    points: jxt.ArrayLike,\n    cell_data: Mapping[str, jxt.ArrayLike],\n) -> jax.Array:\n    def single(x: jxt.ArrayLike) -> jax.Array:\n        disp: jax.Array = jnp.zeros((4, 3))\n        disp = disp.at[0, 0].set(x)\n        jac",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/constitutive/src/plot/curve.py",
        "start": 40,
        "end": 49,
        "startLoc": {
          "line": 40,
          "column": 23,
          "position": 399
        },
        "endLoc": {
          "line": 49,
          "column": 4,
          "position": 515
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/constitutive/src/plot/curve.py",
        "start": 25,
        "end": 34,
        "startLoc": {
          "line": 25,
          "column": 15,
          "position": 230
        },
        "endLoc": {
          "line": 34,
          "column": 2,
          "position": 346
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "(\n    x: jxt.ArrayLike,\n    energy_fn: CellEnergy,\n    points: jxt.ArrayLike,\n    cell_data: Mapping[str, jxt.ArrayLike],\n) -> jax.Array:\n    def single(x: jxt.ArrayLike) -> jax.Array:\n        disp: jax.Array = jnp.zeros((4, 3))\n        disp = disp.at[0, 0].set(x)\n        jac: jax.Array = energy_fn.jac(disp, points, cell_data=cell_data)\n        return jac[2",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/constitutive/src/plot/curve.py",
        "start": 55,
        "end": 65,
        "startLoc": {
          "line": 55,
          "column": 23,
          "position": 569
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 714
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/constitutive/src/plot/curve.py",
        "start": 25,
        "end": 50,
        "startLoc": {
          "line": 25,
          "column": 15,
          "position": 230
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 544
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(\n            x, cfg.energy_fn, mesh.points, cfg.params\n        )\n        f: jax.Array = mesh.volume * jac\n        plt.plot(x, f, label=cfg.name)\n    plt.legend()\n    plt.xlabel(\"Displacement\")\n    plt.ylabel(\"Shear Force\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/constitutive/src/plot/curve.py",
        "start": 105,
        "end": 112,
        "startLoc": {
          "line": 105,
          "column": 23,
          "position": 1135
        },
        "endLoc": {
          "line": 112,
          "column": 14,
          "position": 1214
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/constitutive/src/plot/curve.py",
        "start": 91,
        "end": 98,
        "startLoc": {
          "line": 91,
          "column": 23,
          "position": 993
        },
        "endLoc": {
          "line": 98,
          "column": 15,
          "position": 1072
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n    source_weight: nt.FN = np.ones((source.n_faces_strict,))\n    source_weight[mkit.ops.select.select_by_group_names(GROUPS_FREE, mesh=source)] = 0\n    source.point_data.update(\n        mkit.ops.attr.cell_data_to_point_data(source, {\"Weight\": source_weight})\n    )\n    res: mkit",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-maxilla/src/non-rigid.py",
        "start": 32,
        "end": 38,
        "startLoc": {
          "line": 32,
          "column": 28,
          "position": 260
        },
        "endLoc": {
          "line": 38,
          "column": 5,
          "position": 343
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/rigid.py",
        "start": 31,
        "end": 37,
        "startLoc": {
          "line": 31,
          "column": 18,
          "position": 256
        },
        "endLoc": {
          "line": 37,
          "column": 4,
          "position": 339
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport pydantic\n\nimport mkit\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n\nclass Config(mkit.cli.BaseConfig):\n    source: pydantic.FilePath = Path(\"data/non-rigid.vtp\")\n    output: Path = Path(\"data/transfer.vtp\")\n\n\ndef main(cfg: Config) -> None:\n    source: pv.PolyData = mkit.io.pyvista.load_poly_data(cfg.source)\n    target: pv.PolyData = mkit.ext.sculptor.get_template_mandible",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-mandible/src/transfer.py",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 22,
          "position": 140
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/transfer.py",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 21,
          "position": 140
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "()\n    target.triangulate(inplace=True)\n    target.cell_data.update(\n        mkit.ops.transfer.surface_to_surface(\n            source,\n            target,\n            {\"GroupIds\": source.cell_data[\"GroupIds\"]},\n            method=mkit.ops.transfer.C2CAuto(),\n        )\n    )\n    target.field_data[\"GroupNames\"] = source.field_data[\"GroupNames\"]\n    mkit.io.save(target, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-mandible/src/transfer.py",
        "start": 19,
        "end": 33,
        "startLoc": {
          "line": 19,
          "column": 22,
          "position": 141
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 257
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/transfer.py",
        "start": 19,
        "end": 33,
        "startLoc": {
          "line": 19,
          "column": 21,
          "position": 141
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 257
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport pydantic_settings\nimport torch\nimport trimesh.transformations as tt\n\nimport mkit\nimport mkit.ops.registration.rigid as reg\nimport mkit.typing.numpy as nt\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n\nclass Config(mkit.cli.BaseConfig):\n    source: pydantic_settings.CliPositionalArg[Path]\n    output: Path = Path(\"data/rigid.vtp\")\n\n\nGROUPS_TO_KEEP",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-mandible/src/rigid.py",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 15,
          "position": 129
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/rigid.py",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 15,
          "position": 129
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ", mesh=source)\n    ] = 0\n    source.point_data.update(\n        mkit.ops.attr.cell_data_to_point_data(source, {\"Weight\": source_weight})\n    )\n    res: reg.RigidRegistrationResult = reg.rigid_registration(\n        source,\n        target,\n        estimate_init=True,\n        init=tt.rotation_matrix(np.pi / 2, [1, 0, 0]),\n        source_weight=source.point_data[\"Weight\"],\n    )\n    ic(res.cost)\n    result: pv.PolyData = source.transform(res.transform)\n    mkit.io.save(result, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-mandible/src/rigid.py",
        "start": 34,
        "end": 51,
        "startLoc": {
          "line": 34,
          "column": 17,
          "position": 288
        },
        "endLoc": {
          "line": 51,
          "column": 2,
          "position": 457
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/rigid.py",
        "start": 33,
        "end": 49,
        "startLoc": {
          "line": 33,
          "column": 12,
          "position": 292
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 459
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport pydantic\nimport pydantic_settings\n\nimport mkit\nimport mkit.typing.numpy as nt\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n\nclass Config(mkit.cli.BaseConfig):\n    model_config = pydantic_settings.SettingsConfigDict(\n        cli_parse_args=True, yaml_file=\"params/non-rigid.yaml\"\n    )\n    source: pydantic.FilePath = Path(\"data/rigid.vtp\")\n    output: Path = Path(\"data/non-rigid.vtp\")\n    steps: list[dict]\n\n\nGROUPS_TO_KEEP",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-mandible/src/non-rigid.py",
        "start": 1,
        "end": 24,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 24,
          "column": 15,
          "position": 141
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/non-rigid.py",
        "start": 1,
        "end": 24,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 24,
          "column": 15,
          "position": 141
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n    source_weight: nt.FN = np.ones((source.n_faces_strict,))\n    source_weight[\n        mkit.ops.select.select_by_group_names(GROUPS_TO_REMOVE, mesh=source)\n    ] = 0\n    source.point_data.update(\n        mkit.ops.attr.cell_data_to_point_data(source, {\"Weight\": source_weight})\n    )\n    res: mkit",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-mandible/src/non-rigid.py",
        "start": 32,
        "end": 40,
        "startLoc": {
          "line": 32,
          "column": 28,
          "position": 254
        },
        "endLoc": {
          "line": 40,
          "column": 5,
          "position": 341
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-mandible/src/rigid.py",
        "start": 31,
        "end": 39,
        "startLoc": {
          "line": 31,
          "column": 18,
          "position": 250
        },
        "endLoc": {
          "line": 39,
          "column": 4,
          "position": 337
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ", mesh=source)\n    ] = 0\n    source.point_data.update(\n        mkit.ops.attr.cell_data_to_point_data(source, {\"Weight\": source_weight})\n    )\n    res: mkit.ops.registration.NonRigidRegistrationResult = (\n        mkit.ops.registration.non_rigid_registration(\n            mkit.ops.registration.non_rigid.Amberg(\n                source,\n                target,\n                point_data={\"weight\": source.point_data[\"Weight\"]},\n                steps=cfg.steps,\n            )\n        )\n    )\n    result: pv.PolyData = source.copy()\n    result.points = res.points\n    mkit.io.save(result, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-mandible/src/non-rigid.py",
        "start": 35,
        "end": 55,
        "startLoc": {
          "line": 35,
          "column": 17,
          "position": 292
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 469
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/non-rigid.py",
        "start": 34,
        "end": 53,
        "startLoc": {
          "line": 34,
          "column": 12,
          "position": 296
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 471
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport pydantic\n\nimport mkit\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n\nclass Config(mkit.cli.BaseConfig):\n    source: pydantic.FilePath = Path(\"data/non-rigid.vtp\")\n    output: Path = Path(\"data/transfer.vtp\")\n\n\ndef main(cfg: Config) -> None:\n    source: pv.PolyData = mkit.io.pyvista.load_poly_data(cfg.source)\n    target: pv.PolyData = mkit.ext.sculptor.get_template_face",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/transfer.py",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 18,
          "position": 140
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/transfer.py",
        "start": 1,
        "end": 19,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 19,
          "column": 21,
          "position": 140
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "()\n    target.triangulate(inplace=True)\n    target.cell_data.update(\n        mkit.ops.transfer.surface_to_surface(\n            source,\n            target,\n            {\"GroupIds\": source.cell_data[\"GroupIds\"]},\n            method=mkit.ops.transfer.C2CAuto(),\n        )\n    )\n    target.field_data[\"GroupNames\"] = source.field_data[\"GroupNames\"]\n    mkit.io.save(target, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/transfer.py",
        "start": 19,
        "end": 33,
        "startLoc": {
          "line": 19,
          "column": 18,
          "position": 141
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 257
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/transfer.py",
        "start": 19,
        "end": 33,
        "startLoc": {
          "line": 19,
          "column": 21,
          "position": 141
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 257
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n    res: reg.RigidRegistrationResult = reg.rigid_registration(\n        source,\n        target,\n        estimate_init=True,\n        init=tt.rotation_matrix(np.pi / 2, [1, 0, 0]),\n        source_weight=source.point_data[\"Weight\"],\n    )\n    ic(res.cost)\n    result: pv.PolyData = source.transform(res.transform)\n    mkit.io.save(result, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/rigid.py",
        "start": 60,
        "end": 73,
        "startLoc": {
          "line": 60,
          "column": 18,
          "position": 506
        },
        "endLoc": {
          "line": 73,
          "column": 2,
          "position": 632
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/rigid.py",
        "start": 36,
        "end": 49,
        "startLoc": {
          "line": 36,
          "column": 5,
          "position": 333
        },
        "endLoc": {
          "line": 49,
          "column": 2,
          "position": 459
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n\n    def get_point_weights(self, value: tt.FLike | tt.FNLike = 1.0) -> tt.FN:\n        value = torch.as_tensor(value) * torch.as_tensor(\n            self.point_data.get(\"weight\", 1.0)\n        )\n        return torch.broadcast_to(value, (self.n_points,))",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/params.py",
        "start": 91,
        "end": 97,
        "startLoc": {
          "line": 91,
          "column": 9,
          "position": 763
        },
        "endLoc": {
          "line": 97,
          "column": 2,
          "position": 851
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/registration/non_rigid/amberg_pytorch3d/_params.py",
        "start": 151,
        "end": 157,
        "startLoc": {
          "line": 151,
          "column": 2,
          "position": 1469
        },
        "endLoc": {
          "line": 157,
          "column": 2,
          "position": 1557
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n\n    def get_landmark_source_idx(self, value: tt.INLike | None = None) -> tt.IN:\n        if value is None:\n            return torch.empty((0,), dtype=torch.int)\n        return torch.as_tensor(value)\n\n    def get_landmark_target_pos(self, value: tt.FN3Like | None = None) -> tt.FN3:\n        if value is None:\n            return torch.empty((0, 3))\n        return torch.as_tensor(value",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/params.py",
        "start": 97,
        "end": 107,
        "startLoc": {
          "line": 97,
          "column": 2,
          "position": 851
        },
        "endLoc": {
          "line": 107,
          "column": 6,
          "position": 991
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/registration/non_rigid/amberg_pytorch3d/_params.py",
        "start": 127,
        "end": 138,
        "startLoc": {
          "line": 127,
          "column": 9,
          "position": 1138
        },
        "endLoc": {
          "line": 138,
          "column": 3,
          "position": 1280
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n\n    def get_threshold_distance(self, value: tt.FLike | tt.FNLike = 0.1) -> tt.FN:\n        value = torch.as_tensor(value) * torch.as_tensor(\n            self.point_data.get(\"threshold_distance\", 1.0)\n        )\n        return torch.broadcast_to(value, (self.n_points,))\n\n    def get_threshold_normal(self, value: tt.FLike | tt.FNLike = 0.1",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/params.py",
        "start": 107,
        "end": 115,
        "startLoc": {
          "line": 107,
          "column": 6,
          "position": 992
        },
        "endLoc": {
          "line": 115,
          "column": 4,
          "position": 1106
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/registration/non_rigid/amberg_pytorch3d/_params.py",
        "start": 139,
        "end": 147,
        "startLoc": {
          "line": 139,
          "column": 9,
          "position": 1293
        },
        "endLoc": {
          "line": 147,
          "column": 4,
          "position": 1407
        }
      }
    },
    {
      "format": "python",
      "lines": 33,
      "fragment": "GROUP_NAMES_MATCH: list[str] = [\n    \"Caruncle\",\n    \"Chin\",\n    \"EyelidBottom\",\n    \"EyelidInnerBottom\",\n    \"EyelidInnerTop\",\n    \"EyelidOuterBottom\",\n    \"EyelidOuterTop\",\n    \"EyelidTop\",\n    \"Face\",\n    \"LipBottom\",\n    \"LipOuterBottom\",\n    \"LipOuterTop\",\n    \"LipTop\",\n]\nGROUP_NAMES_REMOVE: list[str] = [\n    \"MouthSocketBottom\",\n    \"MouthSocketTop\",\n    \"EyeSocketTop\",\n    \"EyeSocketBottom\",\n]\n\n\ndef names_to_ids(mesh: pv.PolyData, names: list[str]) -> list[int]:\n    return [i for i, name in enumerate(mesh.field_data[\"GroupNames\"]) if name in names]\n\n\ndef select_by_group_names(mesh: pv.PolyData, names: list[str]) -> nt.BN:\n    return np.isin(mesh.cell_data[\"GroupIds\"], names_to_ids(mesh, names))\n\n\ndef main(cfg: Config) -> None:\n    source",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/non-rigid.py",
        "start": 21,
        "end": 53,
        "startLoc": {
          "line": 21,
          "column": 1,
          "position": 126
        },
        "endLoc": {
          "line": 53,
          "column": 7,
          "position": 362
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-face/src/rigid.py",
        "start": 19,
        "end": 51,
        "startLoc": {
          "line": 19,
          "column": 1,
          "position": 114
        },
        "endLoc": {
          "line": 51,
          "column": 6,
          "position": 350
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n    res: mkit.ops.registration.NonRigidRegistrationResult = (\n        mkit.ops.registration.non_rigid_registration(\n            mkit.ops.registration.non_rigid.Amberg(\n                source,\n                target,\n                point_data={\"weight\": source.point_data[\"Weight\"]},\n                steps=cfg.steps,\n            )\n        )\n    )\n    result: pv.PolyData = source.copy()\n    result.points = res.points\n    mkit.io.save(result, cfg.output)\n\n\nmkit.cli.auto_run()(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/template-face/src/non-rigid.py",
        "start": 61,
        "end": 77,
        "startLoc": {
          "line": 61,
          "column": 28,
          "position": 511
        },
        "endLoc": {
          "line": 77,
          "column": 2,
          "position": 645
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/template-maxilla/src/non-rigid.py",
        "start": 37,
        "end": 53,
        "startLoc": {
          "line": 37,
          "column": 5,
          "position": 337
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 471
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ")\n    dicom_dir: pydantic.DirectoryPath = Path(\"~/Documents/CT/\").expanduser()\n\n\ndef main(cfg: Config) -> None:\n    dataset: mkit.io.DICOMDataset = mkit.io.DICOMDataset(cfg.dicom_dir)\n    for patient in dataset.values():\n        try:\n            pre_face: pv.PolyData = mkit.io.pyvista.load_poly_data(\n                f\"{cfg.data_dir}/{patient.id}/{patient[0].date}/02-face-non-rigid.vtp\"\n            )\n            pre_mandible: pv.PolyData = mkit.io.pyvista.load_poly_data(\n                f\"{cfg.data_dir}/{patient.id}/{patient[0].date}/02-mandible-non-rigid.vtp\"\n            )\n            pre_maxilla: pv.PolyData = mkit.io.pyvista.load_poly_data(\n                f\"{cfg.data_dir}/{patient.id}/{patient[0].date}/02-maxilla-non-rigid.vtp\"\n            )\n            post_face: pv.PolyData = mkit.io.pyvista.load_poly_data(\n                f\"{cfg.data_dir}/{patient.id}/{patient[-1].date}/02-face-non-rigid.vtp\"\n            )\n            post_mandible: pv.PolyData = mkit.io.pyvista.load_poly_data(\n                f\"{cfg.data_dir}/{patient.id}/{patient[-1].date}/02-mandible-non-rigid.vtp\"\n            )\n            post_maxilla: pv.PolyData = mkit.io.pyvista.load_poly_data(\n                f\"{cfg.data_dir}/{patient.id}/{patient[-1].date}/02-maxilla-non-rigid.vtp\"\n            )\n        except FileNotFoundError:\n            continue",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/tetgen.py",
        "start": 11,
        "end": 38,
        "startLoc": {
          "line": 11,
          "column": 17,
          "position": 61
        },
        "endLoc": {
          "line": 38,
          "column": 9,
          "position": 304
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/tetgen.py",
        "start": 13,
        "end": 40,
        "startLoc": {
          "line": 13,
          "column": 15,
          "position": 82
        },
        "endLoc": {
          "line": 40,
          "column": 7,
          "position": 325
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "(\n            (pre_mandible.n_points,), dtype=bool\n        )\n        pre_skull: pv.PolyData = pv.merge([pre_maxilla, pre_mandible])\n        pre_skull.flip_normals()\n        pre: pv.PolyData = pv.merge([pre_face, pre_skull])\n        tetra: pv.UnstructuredGrid = mkit.ext.tetwild(pre)\n        tetra.point_data.update(\n            mkit.ops.transfer.surface_to_volume(\n                pre,\n                tetra,\n                {\n                    \"pin_disp\": pre.point_data[\"pin_disp\"],\n                    \"pin_mask\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/tetgen.py",
        "start": 48,
        "end": 61,
        "startLoc": {
          "line": 48,
          "column": 5,
          "position": 455
        },
        "endLoc": {
          "line": 61,
          "column": 11,
          "position": 585
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/tetgen.py",
        "start": 60,
        "end": 73,
        "startLoc": {
          "line": 60,
          "column": 6,
          "position": 611
        },
        "endLoc": {
          "line": 73,
          "column": 9,
          "position": 741
        }
      }
    },
    {
      "format": "python",
      "lines": 44,
      "fragment": "import mkit\nimport mkit.typing.numpy as nt\n\n\nclass Config(mkit.cli.BaseConfig):\n    data_dir: pydantic.DirectoryPath = Path(\"/home/liblaf/Documents/CT\")\n\n\ndef ct_to_surface(ct: pv.ImageData, threshold: float) -> pv.PolyData:\n    ct = ct.gaussian_smooth()\n    contours: pv.PolyData = ct.contour([threshold])\n    contour: pv.PolyData = contours.connectivity(\"largest\")\n    return contour\n\n\n@functools.cache\ndef prepare_template(component: str) -> pv.PolyData:\n    source: pv.PolyData = mkit.io.pyvista.load_poly_data(\n        f\"data/template/{component}.vtp\"\n    )\n    return source\n\n\n@functools.cache\ndef load_non_rigid_params(component: str) -> Any:\n    cfg: Any = mkit.utils.load_yaml(f\"params/{component}.yaml\")\n    return cfg[\"non-rigid\"]\n\n\ndef rigid_registration(\n    source: pv.PolyData, target: pv.PolyData, *, estimate_init: bool = True\n) -> mkit.ops.registration.RigidRegistrationResult:\n    result: mkit.ops.registration.rigid.RigidRegistrationResult = (\n        mkit.ops.registration.rigid.rigid_registration(\n            source,\n            target,\n            estimate_init=estimate_init,\n            source_weight=source.point_data[\"Weight\"],\n        )\n    )\n    return result\n\n\ndef",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/register.py",
        "start": 9,
        "end": 52,
        "startLoc": {
          "line": 9,
          "column": 1,
          "position": 42
        },
        "endLoc": {
          "line": 52,
          "column": 4,
          "position": 388
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/register.py",
        "start": 12,
        "end": 55,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 58
        },
        "endLoc": {
          "line": 55,
          "column": 6,
          "position": 404
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "def non_rigid_registration(\n    source: pv.PolyData, target: pv.PolyData, component: str\n) -> pv.PolyData:\n    weight: nt.FN = np.array(source.point_data[\"Weight\"])\n    weight[source.points[:, 2] > target.bounds[5]] = 0\n    non_rigid: mkit.ops.registration.NonRigidRegistrationResult = (\n        mkit.ops.registration.non_rigid.non_rigid_registration(\n            mkit.ops.registration.non_rigid.Amberg(\n                source,\n                target,\n                point_data={\"weight\": weight},\n                steps=load_non_rigid_params(component)[\"steps\"],\n            )\n        )\n    )\n    result: pv.PolyData = source.copy()\n    result.points = non_rigid.points\n    return result\n\n\ndef main(cfg: Config) -> None:\n    template_face",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/register.py",
        "start": 52,
        "end": 73,
        "startLoc": {
          "line": 52,
          "column": 1,
          "position": 388
        },
        "endLoc": {
          "line": 73,
          "column": 14,
          "position": 605
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/register.py",
        "start": 56,
        "end": 77,
        "startLoc": {
          "line": 56,
          "column": 1,
          "position": 410
        },
        "endLoc": {
          "line": 77,
          "column": 7,
          "position": 627
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "template_face: pv.PolyData = prepare_template(\"face\")\n    template_mandible: pv.PolyData = prepare_template(\"mandible\")\n    template_maxilla: pv.PolyData = prepare_template(\"maxilla\")\n    dataset: mkit.io.DICOMDataset = mkit.io.DICOMDataset(cfg.data_dir)\n    for patient in dataset.values():\n        for",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/register.py",
        "start": 73,
        "end": 78,
        "startLoc": {
          "line": 73,
          "column": 5,
          "position": 605
        },
        "endLoc": {
          "line": 78,
          "column": 4,
          "position": 687
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/register.py",
        "start": 88,
        "end": 93,
        "startLoc": {
          "line": 88,
          "column": 5,
          "position": 697
        },
        "endLoc": {
          "line": 93,
          "column": 3,
          "position": 779
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "if acq_idx > 0:\n                template_face = mkit.io.pyvista.load_poly_data(\n                    f\"data/patients/{patient.id}/{patient[0].date}/02-face-non-rigid.vtp\"\n                )\n                template_mandible = mkit.io.pyvista.load_poly_data(\n                    f\"data/patients/{patient.id}/{patient[0].date}/02-mandible-non-rigid.vtp\"\n                )\n                template_maxilla = mkit.io.pyvista.load_poly_data(\n                    f\"data/patients/{patient.id}/{patient[0].date}/02-maxilla-non-rigid.vtp\"\n                )\n            else:\n                template_face = prepare_template(\"face\")\n                template_mandible = prepare_template(\"mandible\")\n                template_maxilla = prepare_template(\"maxilla\")\n            face",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/register.py",
        "start": 79,
        "end": 93,
        "startLoc": {
          "line": 79,
          "column": 13,
          "position": 703
        },
        "endLoc": {
          "line": 93,
          "column": 5,
          "position": 810
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/register.py",
        "start": 111,
        "end": 125,
        "startLoc": {
          "line": 111,
          "column": 13,
          "position": 916
        },
        "endLoc": {
          "line": 125,
          "column": 6,
          "position": 1023
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n\n            rigid_mandible: pv.PolyData = template_mandible.transform(\n                skull_rigid_result.transform, inplace=False\n            )\n            mandible_rigid_result: mkit.ops.registration.RigidRegistrationResult = (\n                rigid_registration(rigid_mandible, skull, estimate_init=False)\n            )\n            rigid_mandible = rigid_mandible.transform(\n                mandible_rigid_result.transform, inplace=False\n            )\n            mkit",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/25/registration/src/register.py",
        "start": 130,
        "end": 141,
        "startLoc": {
          "line": 130,
          "column": 13,
          "position": 1117
        },
        "endLoc": {
          "line": 141,
          "column": 5,
          "position": 1205
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/register.py",
        "start": 135,
        "end": 145,
        "startLoc": {
          "line": 135,
          "column": 13,
          "position": 1142
        },
        "endLoc": {
          "line": 145,
          "column": 19,
          "position": 1229
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport trimesh as tm\n\nimport mkit\n\nif TYPE_CHECKING:\n    import pyvista as pv\n\n    from mkit.ops.registration import GlobalRegistrationResult, RigidRegistrationResult\n\n\nclass Config(mkit.cli.BaseConfig):\n    target: Path\n    output: Path\n\n\n@mkit.cli.auto_run()\ndef main(cfg: Config) -> None:\n    source: pv.PolyData = mkit.ext.sculptor.get_template_face",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/12/faceform/src/face.py",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 18,
          "position": 138
        }
      },
      "secondFile": {
        "name": "exp/2024/09/12/faceform/src/rigid.py",
        "start": 1,
        "end": 22,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 22,
          "column": 19,
          "position": 138
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n    result: GlobalRegistrationResult = mkit.ops.registration.global_registration(\n        source, target, init=tm.transformations.rotation_matrix(np.pi, [1.0, 0.0, 0.0])\n    )\n    source.transform(result.transform, inplace=True)\n    result",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/12/faceform/src/face.py",
        "start": 23,
        "end": 28,
        "startLoc": {
          "line": 23,
          "column": 7,
          "position": 163
        },
        "endLoc": {
          "line": 28,
          "column": 7,
          "position": 232
        }
      },
      "secondFile": {
        "name": "exp/2024/09/12/faceform/src/rigid.py",
        "start": 25,
        "end": 30,
        "startLoc": {
          "line": 25,
          "column": 18,
          "position": 179
        },
        "endLoc": {
          "line": 30,
          "column": 7,
          "position": 248
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "# Poisson's ratio\nlambda_: float = E * nu / ((1 + nu) * (1 - 2 * nu))  # Lamé's first parameter\nG: float = E / (2 * (1 + nu))  # Shear modulus\n\n\ndef main(cfg: Config) -> None:\n    mesh",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/01/real-data/src/main.py",
        "start": 24,
        "end": 30,
        "startLoc": {
          "line": 24,
          "column": 3,
          "position": 145
        },
        "endLoc": {
          "line": 30,
          "column": 5,
          "position": 234
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/simulate.py",
        "start": 26,
        "end": 32,
        "startLoc": {
          "line": 26,
          "column": 3,
          "position": 182
        },
        "endLoc": {
          "line": 32,
          "column": 8,
          "position": 271
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n    material: elastic.Material = elastic.get_preset(cfg.material)\n    material.cell_data.update({\"mu\": G, \"lambda\": lambda_})\n    mesh.cell_data.update(material.cell_data)  # pyright: ignore [reportArgumentType]\n    problem: Problem = Problem(mesh, material.energy_fn)\n    res: scipy.optimize.OptimizeResult = problem.solve()\n    logger.info(\"{}\", res)\n    disp: npt.NDArray[np.floating] = problem.make_disp(res.x)\n    mesh.point_data[\"solution\"] = disp\n    mesh.cell_data[\"energy_density\"] = np.asarray(problem.model.energy_density(disp))\n    mesh.field_data[\"execution_time\"] = res[\"execution_time\"]\n    mesh.field_data[\"success\"] = res[\"success\"]\n    mesh",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/01/real-data/src/main.py",
        "start": 30,
        "end": 42,
        "startLoc": {
          "line": 30,
          "column": 6,
          "position": 250
        },
        "endLoc": {
          "line": 42,
          "column": 5,
          "position": 444
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/simulate.py",
        "start": 42,
        "end": 56,
        "startLoc": {
          "line": 42,
          "column": 11,
          "position": 422
        },
        "endLoc": {
          "line": 56,
          "column": 5,
          "position": 620
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "from pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport numpy.typing as npt\nimport pyvista as pv\nfrom loguru import logger\n\nimport mkit\nfrom mkit.physics import Problem\nfrom mkit.physics.energy import elastic\n\nif TYPE_CHECKING:\n    import scipy.optimize\n\n\nclass Config(mkit.cli.BaseConfig",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/01/cylinder/src/solve.py",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 11,
          "position": 101
        }
      },
      "secondFile": {
        "name": "exp/2024/09/01/real-data/src/main.py",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 14,
          "position": 101
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n    mesh.cell_data.update(material.cell_data)  # pyright: ignore [reportArgumentType]\n    problem: Problem = Problem(mesh, material.energy_fn)\n    res: scipy.optimize.OptimizeResult = problem.solve()\n    logger.info(\"{}\", res)\n    disp: npt.NDArray[np.floating] = problem.make_disp(res.x)\n    mesh.point_data[\"solution\"] = disp\n    mesh.cell_data[\"energy_density\"] = np.asarray(problem.model.energy_density(disp))\n    mesh.field_data[\"execution_time\"] = res[\"execution_time\"]\n    mesh.field_data[\"success\"] = res[\"success\"]\n    mesh.save(cfg.output)\n\n\nif __name__ == \"__main__\":\n    mkit.cli.run(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/09/01/cylinder/src/solve.py",
        "start": 25,
        "end": 39,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 177
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 359
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/simulate.py",
        "start": 44,
        "end": 46,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 462
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 472
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n    res: scipy.optimize.OptimizeResult = problem.solve()\n    logger.info(\"{}\", res)\n    disp: npt.NDArray[np.floating] = problem.make_disp(res.x)\n    mesh.point_data[\"solution\"] = disp\n    mesh.cell_data[\"energy_density\"] = np.asarray(problem.model.energy_density(disp))\n    mesh.point_data",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/main.py",
        "start": 133,
        "end": 139,
        "startLoc": {
          "line": 133,
          "column": 6,
          "position": 1412
        },
        "endLoc": {
          "line": 139,
          "column": 11,
          "position": 1506
        }
      },
      "secondFile": {
        "name": "exp/2024/10/01/registration/src/simulate.py",
        "start": 46,
        "end": 54,
        "startLoc": {
          "line": 46,
          "column": 10,
          "position": 494
        },
        "endLoc": {
          "line": 54,
          "column": 11,
          "position": 592
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\n    surface.triangulate(inplace=True, progress_bar=True)\n    tetmesh: pv.UnstructuredGrid = mkit.ext.tetwild(surface)\n    surface = tetmesh.extract_surface(progress_bar=True)\n    left_mask: npt.NDArray[np.bool] = surface.points[:, 0] < surface.bounds[0] + 1e-3\n    right_mask: npt.NDArray[np.bool] = surface.points[:, 0] > surface.bounds[1] - 1e-3\n    surface.point_data[\"pin_mask\"] = left_mask | right_mask\n    pin_disp: npt.NDArray[np.floating] = np.zeros((surface.n_points, 3))\n    pin_disp",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/gen.py",
        "start": 18,
        "end": 26,
        "startLoc": {
          "line": 18,
          "column": 2,
          "position": 112
        },
        "endLoc": {
          "line": 26,
          "column": 9,
          "position": 288
        }
      },
      "secondFile": {
        "name": "exp/2024/09/01/cylinder/src/gen.py",
        "start": 24,
        "end": 32,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 190
        },
        "endLoc": {
          "line": 32,
          "column": 6,
          "position": 366
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    F",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 32,
        "end": 39,
        "startLoc": {
          "line": 32,
          "column": 12,
          "position": 365
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 456
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 18,
        "end": 25,
        "startLoc": {
          "line": 18,
          "column": 7,
          "position": 162
        },
        "endLoc": {
          "line": 25,
          "column": 8,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    F =",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 48,
        "end": 55,
        "startLoc": {
          "line": 48,
          "column": 3,
          "position": 572
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 665
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 18,
        "end": 39,
        "startLoc": {
          "line": 18,
          "column": 7,
          "position": 162
        },
        "endLoc": {
          "line": 39,
          "column": 2,
          "position": 457
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    _",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 63,
        "end": 70,
        "startLoc": {
          "line": 63,
          "column": 10,
          "position": 783
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 874
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 18,
        "end": 25,
        "startLoc": {
          "line": 18,
          "column": 7,
          "position": 162
        },
        "endLoc": {
          "line": 25,
          "column": 8,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    F: jax.Array = tetra.deformation_gradient(disp, points)\n    W",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 78,
        "end": 86,
        "startLoc": {
          "line": 78,
          "column": 4,
          "position": 999
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 1110
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 18,
        "end": 40,
        "startLoc": {
          "line": 18,
          "column": 7,
          "position": 162
        },
        "endLoc": {
          "line": 40,
          "column": 11,
          "position": 476
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "def neo_hookean(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    _: Any\n    F: jax.Array = tetra.deformation_gradient(disp, points)\n    mu",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 38,
        "end": 47,
        "startLoc": {
          "line": 38,
          "column": 1,
          "position": 256
        },
        "endLoc": {
          "line": 47,
          "column": 3,
          "position": 376
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 32,
        "end": 72,
        "startLoc": {
          "line": 32,
          "column": 1,
          "position": 362
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 900
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n    lambda_hat: jax.Array = mu + lambda_\n    W: jax.Array = (\n        0.5 * mu * jnp.sum(F**2)\n        + 0.5 * lambda_hat * (jnp.linalg.det(F) - 1 - mu / lambda_hat) ** 2\n    )\n    return W\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 48,
        "end": 57,
        "startLoc": {
          "line": 48,
          "column": 2,
          "position": 413
        },
        "endLoc": {
          "line": 57,
          "column": 6,
          "position": 509
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 39,
        "end": 48,
        "startLoc": {
          "line": 39,
          "column": 7,
          "position": 473
        },
        "endLoc": {
          "line": 48,
          "column": 4,
          "position": 569
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "import functools\nfrom collections.abc import Mapping\nfrom typing import TYPE_CHECKING, Any\n\nimport jax\nimport jax.numpy as jnp\nimport jax.typing as jxt\nimport numpy as np\nimport numpy.typing as npt\nimport pyvista as pv\nimport rich\nimport rich.traceback\nimport scipy\nimport scipy.optimize\nimport scipy.sparse\nimport taichi as ti\nfrom icecream import ic\nfrom scipy.optimize import OptimizeResult\n\nimport mkit.ext\nimport mkit.logging\nimport mkit.point\nimport mkit.sparse\nfrom mkit.physics.cell import tetra\nfrom mkit.physics.energy import gravity\nfrom mkit.physics.energy.abc import CellEnergyFn\nfrom mkit.physics.energy.elastic import corotated\nfrom mkit.physics.model import Model\n\nif TYPE_CHECKING:\n    import sparse\n\nti.init()\nmkit.logging.init()\nrich.traceback.install(show_locals=True)\n\n\ndef neo_hookean(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    mu",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean-2.py",
        "start": 1,
        "end": 45,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 45,
          "column": 3,
          "position": 350
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 8,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 82,
      "fragment": "return W\n\n\nclass Problem:\n    model: Model\n    energy_fn: CellEnergyFn\n\n    def __init__(self, mesh: Any) -> None:\n        self.model = Model(mesh)\n        self.energy_fn = CellEnergyFn(neo_hookean) + CellEnergyFn(gravity)\n\n    def solve(self) -> OptimizeResult:\n        x0: npt.NDArray[np.float64] = np.zeros((self.n_free, 3))\n        res: OptimizeResult = scipy.optimize.minimize(\n            self.fun,\n            x0.flatten(),\n            method=\"trust-constr\",\n            jac=self.jac,\n            hess=self.hess,\n            options={\"disp\": True, \"verbose\": 2},\n            callback=self.callback,\n        )\n        # import cyipopt\n\n        # A: scipy.sparse.coo_matrix = self.slide_constraint.A\n        # ic(A.dtype)\n        # res: OptimizeResult = cyipopt.minimize_ipopt(\n        #     self.fun,\n        #     x0.flatten(),\n        #     jac=self.jac,\n        #     hess=self.hess,\n        #     constraints=[\n        #         # self.slide_constraint\n        #         {\n        #             \"type\": \"eq\",\n        #             \"fun\": lambda x: A @ x,\n        #             \"jac\": lambda x: scipy.sparse.coo_array(A),\n        #             \"hess\": lambda x, v: np.zeros((self.n_free * 3,)),\n        #         }\n        #     ],\n        #     options={\"print_level\": 5, \"max_wall_time\": 300.0},\n        # )\n        return res\n\n    @mkit.logging.log_time\n    def fun(self, x: npt.ArrayLike) -> float:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        energy: jax.Array = self.model.energy(self.energy_fn, disp)\n        return float(energy)\n\n    @mkit.logging.log_time\n    def jac(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        jac: jax.Array = self.model.energy_jac(self.energy_fn, disp)\n        return np.asarray(jac[self.free_mask].flatten())\n\n    @mkit.logging.log_time\n    def hess(self, x: npt.ArrayLike) -> scipy.sparse.coo_matrix:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        hess: sparse.COO = self.model.energy_hess(self.energy_fn, disp)\n        hess = mkit.sparse.sparse_mask(\n            hess,\n            (\n                self.free_mask,\n                np.ones((3,), np.bool),\n                self.free_mask,\n                np.ones((3,), np.bool),\n            ),\n        )\n        return hess.reshape((self.n_free * 3, self.n_free * 3)).to_scipy_sparse()\n\n    def callback(self, intermediate_result: OptimizeResult) -> None:\n        # ic(intermediate_result)\n        pass\n\n    @functools.cached_property\n    def n_free(self) -> int:\n        return np.count_nonzero(self.free_mask)\n\n    def make_disp(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = np.zeros((self.model.n_points, 3))\n        disp[self.pin_mask",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean-2.py",
        "start": 54,
        "end": 135,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 483
        },
        "endLoc": {
          "line": 135,
          "column": 9,
          "position": 1238
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 54,
        "end": 135,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 503
        },
        "endLoc": {
          "line": 135,
          "column": 10,
          "position": 1258
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "disp[self.free_mask] = np.asarray(x).reshape((self.n_free, 3))\n        return disp\n\n    @functools.cached_property\n    def free_mask(self) -> npt.NDArray[np.bool]:\n        return ~self.pin_mask\n\n    @functools.cached_property\n    def pin_mask(self) -> npt.NDArray[np.bool]:\n        return np.asarray(self.model.point_data[\"pin_mask\"], np.bool)\n\n\ndef main() -> None:\n    mesh: pv.UnstructuredGrid = pv.read(\"data/input.vtu\")\n    problem = Problem(mesh)\n    res: OptimizeResult = problem.solve()\n    ic(res)\n    disp: npt.NDArray[np.float64] = problem.make_disp(res.x)\n    mesh.point_data[\"solution\"] = disp\n    mesh.cell_data[\"energy_density\"] = problem.model.energy_density(  # pyright: ignore [reportArgumentType]\n        CellEnergyFn(corotated), disp\n    )\n\n    mesh.save(\"data/Neo-Hookean-2.vtu\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean-2.py",
        "start": 136,
        "end": 159,
        "startLoc": {
          "line": 136,
          "column": 9,
          "position": 1258
        },
        "endLoc": {
          "line": 159,
          "column": 25,
          "position": 1509
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 135,
        "end": 158,
        "startLoc": {
          "line": 135,
          "column": 9,
          "position": 1254
        },
        "endLoc": {
          "line": 158,
          "column": 23,
          "position": 1505
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "import functools\nfrom collections.abc import Mapping\nfrom typing import TYPE_CHECKING, Any\n\nimport jax\nimport jax.numpy as jnp\nimport jax.typing as jxt\nimport numpy as np\nimport numpy.typing as npt\nimport pyvista as pv\nimport rich\nimport rich.traceback\nimport scipy\nimport scipy.linalg",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 7,
          "position": 94
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 9,
          "position": 94
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "import taichi as ti\nfrom icecream import ic\nfrom scipy.optimize import OptimizeResult\n\nimport mkit.ext\nimport mkit.logging\nimport mkit.point\nimport mkit.sparse\nfrom mkit.physics.cell import tetra\nfrom mkit.physics.energy import gravity\nfrom mkit.physics.energy.abc import CellEnergyFn\nfrom mkit.physics.energy.elastic import corotated\nfrom mkit.physics.model import Model\n\nif TYPE_CHECKING:\n    import sparse\n\nti.init()\nmkit.logging.init()\nrich.traceback.install(show_locals=True)\n\n\ndef linear",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear.py",
        "start": 18,
        "end": 40,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 116
        },
        "endLoc": {
          "line": 40,
          "column": 7,
          "position": 272
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 16,
        "end": 38,
        "startLoc": {
          "line": 16,
          "column": 1,
          "position": 102
        },
        "endLoc": {
          "line": 38,
          "column": 12,
          "position": 258
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n\n\ndef linear(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    _: Any\n    mu",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear.py",
        "start": 37,
        "end": 48,
        "startLoc": {
          "line": 37,
          "column": 5,
          "position": 266
        },
        "endLoc": {
          "line": 48,
          "column": 3,
          "position": 370
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 15,
        "end": 71,
        "startLoc": {
          "line": 15,
          "column": 2,
          "position": 155
        },
        "endLoc": {
          "line": 71,
          "column": 2,
          "position": 880
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "grad_op: jax.Array = tetra.grad_op(points)\n    grad_u: jax.Array = grad_op @ disp\n    E: jax.Array = 0.5 * (grad_u.T + grad_u)\n    W: jax.Array = 0.5 * lambda_ * jnp.trace(E) ** 2 + mu * jnp.trace(E @ E)\n    return W\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear.py",
        "start": 50,
        "end": 57,
        "startLoc": {
          "line": 50,
          "column": 5,
          "position": 410
        },
        "endLoc": {
          "line": 57,
          "column": 6,
          "position": 519
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 25,
        "end": 32,
        "startLoc": {
          "line": 25,
          "column": 5,
          "position": 253
        },
        "endLoc": {
          "line": 32,
          "column": 4,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 73,
      "fragment": ") + CellEnergyFn(gravity)\n\n    def solve(self) -> OptimizeResult:\n        x0: npt.NDArray[np.float64] = np.zeros((self.n_free, 3))\n        res: OptimizeResult = scipy.optimize.minimize(\n            self.fun,\n            x0.flatten(),\n            method=\"trust-constr\",\n            jac=self.jac,\n            hess=self.hess,\n            options={\"disp\": True, \"verbose\": 2},\n            callback=self.callback,\n        )\n        # import cyipopt\n\n        # A: scipy.sparse.coo_matrix = self.slide_constraint.A\n        # ic(A.dtype)\n        # res: OptimizeResult = cyipopt.minimize_ipopt(\n        #     self.fun,\n        #     x0.flatten(),\n        #     jac=self.jac,\n        #     hess=self.hess,\n        #     constraints=[\n        #         # self.slide_constraint\n        #         {\n        #             \"type\": \"eq\",\n        #             \"fun\": lambda x: A @ x,\n        #             \"jac\": lambda x: scipy.sparse.coo_array(A),\n        #             \"hess\": lambda x, v: np.zeros((self.n_free * 3,)),\n        #         }\n        #     ],\n        #     options={\"print_level\": 5, \"max_wall_time\": 300.0},\n        # )\n        return res\n\n    @mkit.logging.log_time\n    def fun(self, x: npt.ArrayLike) -> float:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        energy: jax.Array = self.model.energy(self.energy_fn, disp)\n        return float(energy)\n\n    @mkit.logging.log_time\n    def jac(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        jac: jax.Array = self.model.energy_jac(self.energy_fn, disp)\n        return np.asarray(jac[self.free_mask].flatten())\n\n    @mkit.logging.log_time\n    def hess(self, x: npt.ArrayLike) -> scipy.sparse.coo_matrix:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        hess: sparse.COO = self.model.energy_hess(self.energy_fn, disp)\n        hess = mkit.sparse.sparse_mask(\n            hess,\n            (\n                self.free_mask,\n                np.ones((3,), np.bool),\n                self.free_mask,\n                np.ones((3,), np.bool),\n            ),\n        )\n        return hess.reshape((self.n_free * 3, self.n_free * 3)).to_scipy_sparse()\n\n    def callback(self, intermediate_result: OptimizeResult) -> None:\n        # ic(intermediate_result)\n        pass\n\n    @functools.cached_property\n    def n_free(self) -> int:\n        return np.count_nonzero(self.free_mask)\n\n    def make_disp(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = np.zeros((self.model.n_points, 3))\n        # disp[self.pin_mask] = self.model.point_data[\"pin_disp\"][self.pin_mask]",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear.py",
        "start": 63,
        "end": 135,
        "startLoc": {
          "line": 63,
          "column": 7,
          "position": 579
        },
        "endLoc": {
          "line": 135,
          "column": 73,
          "position": 1264
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 63,
        "end": 135,
        "startLoc": {
          "line": 63,
          "column": 12,
          "position": 569
        },
        "endLoc": {
          "line": 135,
          "column": 5,
          "position": 1254
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "disp[self.free_mask] = np.asarray(x).reshape((self.n_free, 3))\n        return disp\n\n    @functools.cached_property\n    def free_mask(self) -> npt.NDArray[np.bool]:\n        return ~self.pin_mask\n\n    @functools.cached_property\n    def pin_mask(self) -> npt.NDArray[np.bool]:\n        return np.asarray(self.model.point_data[\"pin_mask\"], np.bool)\n\n\ndef main() -> None:\n    mesh: pv.UnstructuredGrid = pv.read(\"data/input.vtu\")\n    problem = Problem(mesh)\n    res: OptimizeResult = problem.solve()\n    ic(res)\n    disp: npt.NDArray[np.float64] = problem.make_disp(res.x)\n    mesh.point_data[\"solution\"] = disp\n    mesh.cell_data[\"energy_density\"] = problem.model.energy_density(  # pyright: ignore [reportArgumentType]\n        CellEnergyFn(corotated), disp\n    )\n\n    mesh.save(\"data/linear.vtu\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear.py",
        "start": 136,
        "end": 159,
        "startLoc": {
          "line": 136,
          "column": 9,
          "position": 1267
        },
        "endLoc": {
          "line": 159,
          "column": 18,
          "position": 1518
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 135,
        "end": 158,
        "startLoc": {
          "line": 135,
          "column": 9,
          "position": 1254
        },
        "endLoc": {
          "line": 158,
          "column": 23,
          "position": 1505
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "import functools\nfrom collections.abc import Mapping\nfrom typing import TYPE_CHECKING, Any\n\nimport jax\nimport jax.numpy as jnp\nimport jax.typing as jxt\nimport numpy as np\nimport numpy.typing as npt\nimport pyvista as pv\nimport rich\nimport rich.traceback\nimport scipy\nimport scipy.linalg\nimport scipy.optimize\nimport scipy.sparse\nimport scipy.sparse.linalg\nimport taichi as ti\nfrom icecream import ic\nfrom scipy.optimize import OptimizeResult\n\nimport mkit.ext\nimport mkit.logging\nimport mkit.point\nimport mkit.sparse\nfrom mkit.physics.cell import tetra\nfrom mkit.physics.energy.",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear-spsolve.py",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 2,
          "position": 186
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 7,
          "position": 187
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": "from mkit.physics.energy.abc import CellEnergyFn\nfrom mkit.physics.energy.elastic import corotated\nfrom mkit.physics.model import Model\n\nif TYPE_CHECKING:\n    import sparse\n\nti.init()\nmkit.logging.init()\nrich.traceback.install(show_locals=True)\n\n\ndef linear(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike] = {},\n    cell_data: Mapping[str, jxt.ArrayLike] = {},\n    field_data: Mapping[str, jxt.ArrayLike] = {},\n) -> jax.Array:\n    _: Any\n    mu: jax.Array = jnp.asarray(cell_data[\"mu\"])\n    lambda_: jax.Array = jnp.asarray(cell_data[\"lambda\"])\n    grad_op: jax.Array = tetra.grad_op(points)\n    grad_u: jax.Array = grad_op @ disp\n    E: jax.Array = 0.5 * (grad_u.T + grad_u)\n    W: jax.Array = 0.5 * lambda_ * jnp.trace(E) ** 2 + mu * jnp.trace(E @ E)\n    return W\n\n\nclass Problem:\n    model: Model\n    energy_fn: CellEnergyFn\n\n    def __init__(self, mesh: Any) -> None:\n        self.model = Model(mesh)\n        self.energy_fn = CellEnergyFn(linear)\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear-spsolve.py",
        "start": 27,
        "end": 64,
        "startLoc": {
          "line": 27,
          "column": 1,
          "position": 179
        },
        "endLoc": {
          "line": 64,
          "column": 4,
          "position": 571
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 26,
        "end": 63,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 177
        },
        "endLoc": {
          "line": 63,
          "column": 2,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 71,
      "fragment": ")\n\n    def solve(self) -> OptimizeResult:\n        x0: npt.NDArray[np.float64] = np.zeros((self.n_free, 3))\n        res: OptimizeResult = scipy.optimize.minimize(\n            self.fun,\n            x0.flatten(),\n            method=\"trust-constr\",\n            jac=self.jac,\n            hess=self.hess,\n            options={\"disp\": True, \"verbose\": 2},\n            callback=self.callback,\n        )\n        # import cyipopt\n\n        # A: scipy.sparse.coo_matrix = self.slide_constraint.A\n        # ic(A.dtype)\n        # res: OptimizeResult = cyipopt.minimize_ipopt(\n        #     self.fun,\n        #     x0.flatten(),\n        #     jac=self.jac,\n        #     hess=self.hess,\n        #     constraints=[\n        #         # self.slide_constraint\n        #         {\n        #             \"type\": \"eq\",\n        #             \"fun\": lambda x: A @ x,\n        #             \"jac\": lambda x: scipy.sparse.coo_array(A),\n        #             \"hess\": lambda x, v: np.zeros((self.n_free * 3,)),\n        #         }\n        #     ],\n        #     options={\"print_level\": 5, \"max_wall_time\": 300.0},\n        # )\n        return res\n\n    @mkit.logging.log_time\n    def fun(self, x: npt.ArrayLike) -> float:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        energy: jax.Array = self.model.energy(self.energy_fn, disp)\n        return float(energy)\n\n    @mkit.logging.log_time\n    def jac(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        jac: jax.Array = self.model.energy_jac(self.energy_fn, disp)\n        return np.asarray(jac[self.free_mask].flatten())\n\n    @mkit.logging.log_time\n    def hess(self, x: npt.ArrayLike) -> scipy.sparse.coo_matrix:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        hess: sparse.COO = self.model.energy_hess(self.energy_fn, disp)\n        hess = mkit.sparse.sparse_mask(\n            hess,\n            (\n                self.free_mask,\n                np.ones((3,), np.bool),\n                self.free_mask,\n                np.ones((3,), np.bool),\n            ),\n        )\n        return hess.reshape((self.n_free * 3, self.n_free * 3)).to_scipy_sparse()\n\n    def callback(self, intermediate_result: OptimizeResult) -> None:\n        # ic(intermediate_result)\n        pass\n\n    @functools.cached_property\n    def n_free(self) -> int:\n        return np.count_nonzero(self.free_mask)\n\n    @functools",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear-spsolve.py",
        "start": 62,
        "end": 132,
        "startLoc": {
          "line": 62,
          "column": 7,
          "position": 567
        },
        "endLoc": {
          "line": 132,
          "column": 11,
          "position": 1185
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 63,
        "end": 133,
        "startLoc": {
          "line": 63,
          "column": 8,
          "position": 576
        },
        "endLoc": {
          "line": 133,
          "column": 4,
          "position": 1194
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ")\n\n    def make_disp(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = np.zeros((self.model.n_points, 3))\n        disp[self.pin_mask] = self.model.point_data[\"pin_disp\"][self.pin_mask]\n        disp[self.free_mask] = np.asarray(x).reshape((self.n_free, 3))\n        return disp\n\n    @functools.cached_property\n    def free_mask(self) -> npt.NDArray[np.bool]:\n        return ~self.pin_mask\n\n    @functools.cached_property\n    def pin_mask(self) -> npt.NDArray[np.bool]:\n        return np.asarray(self.model.point_data[\"pin_mask\"], np.bool)\n\n\ndef main() -> None:\n    mesh: pv.UnstructuredGrid = pv.read(\"data/input.vtu\")\n    problem = Problem(mesh)\n    model",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/linear-spsolve.py",
        "start": 134,
        "end": 154,
        "startLoc": {
          "line": 134,
          "column": 9,
          "position": 1213
        },
        "endLoc": {
          "line": 154,
          "column": 6,
          "position": 1460
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 131,
        "end": 150,
        "startLoc": {
          "line": 131,
          "column": 10,
          "position": 1190
        },
        "endLoc": {
          "line": 150,
          "column": 4,
          "position": 1413
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "nu: float = 0.46\n\n\ndef main() -> None:\n    cfg: Config = OmegaConf.structured(Config)\n    cfg = OmegaConf.merge(cfg, OmegaConf.from_cli())\n    ic(cfg)\n\n    E: float = cfg.E\n    nu: float = cfg.nu\n    mu: float = E / (2 * (1 + nu))\n    lambda_: float = E * nu / ((1 + nu) * (1 - 2 * nu))\n    ic(mu)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/elasticity/src/E-nu-to-lambda-mu.py",
        "start": 10,
        "end": 22,
        "startLoc": {
          "line": 10,
          "column": 5,
          "position": 48
        },
        "endLoc": {
          "line": 22,
          "column": 2,
          "position": 206
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/gen.py",
        "start": 24,
        "end": 35,
        "startLoc": {
          "line": 24,
          "column": 5,
          "position": 133
        },
        "endLoc": {
          "line": 35,
          "column": 2,
          "position": 290
        }
      }
    },
    {
      "format": "python",
      "lines": 145,
      "fragment": "import functools\nimport pathlib\nfrom typing import TYPE_CHECKING, Any\n\nimport jax\nimport numpy as np\nimport numpy.typing as npt\nimport pyvista as pv\nimport scipy.optimize\nimport scipy.sparse\nfrom loguru import logger\n\nimport mkit.cli\nimport mkit.logging\nimport mkit.sparse\nfrom mkit.physics.energy.abc import CellEnergy\nfrom mkit.physics.model import Model\nfrom mkit.physics.preset.elastic import MODELS, Elastic\n\nif TYPE_CHECKING:\n    import sparse\n\n\nclass Config(mkit.cli.BaseConfig):\n    input: pathlib.Path\n    model: str\n    output: pathlib.Path\n\n\nclass Problem:\n    model: Model\n    energy_fn: CellEnergy\n\n    def __init__(self, mesh: Any, name: str) -> None:\n        cfg: Elastic = MODELS[name]\n        self.model = Model(mesh, cfg.energy_fn)\n        self.energy_fn = cfg.energy_fn\n        for k, v in cfg.params.items():\n            self.mesh.cell_data[k] = v  # pyright: ignore [reportArgumentType]\n\n    def solve(self) -> scipy.optimize.OptimizeResult:\n        x0: npt.NDArray[np.floating] = np.zeros((self.n_free, 3))\n        try:\n            res: scipy.optimize.OptimizeResult = scipy.optimize.minimize(\n                self.fun,\n                x0.flatten(),\n                method=\"trust-constr\",\n                jac=self.jac,\n                hess=self.hess,\n                options={\"disp\": True},\n            )\n        except Exception as e:\n            res = scipy.optimize.OptimizeResult()\n            res[\"execution_time\"] = np.nan\n            res[\"message\"] = str(e)\n            res[\"success\"] = False\n            res[\"x\"] = x0.flatten()\n            return res\n        else:\n            return res\n\n    def fun(self, x: npt.ArrayLike) -> jax.Array:\n        disp: npt.NDArray[np.floating] = self.make_disp(x)\n        energy: jax.Array = self.model.energy(disp)\n        return energy\n\n    def jac(self, x: npt.ArrayLike) -> jax.Array:\n        disp: npt.NDArray[np.floating] = self.make_disp(x)\n        jac: jax.Array = self.model.energy_jac(disp)\n        return jac[self.free_mask].flatten()\n\n    def hess(self, x: npt.NDArray) -> scipy.sparse.coo_matrix:\n        disp: npt.NDArray[np.floating] = self.make_disp(x)\n        hess: sparse.COO = self.model.energy_hess(disp)\n        coord_mask: npt.NDArray[np.bool] = np.ones((3,), bool)\n        hess = mkit.sparse.sparse_mask(\n            hess, (self.free_mask, coord_mask, self.free_mask, coord_mask)\n        )\n        return hess.reshape((self.n_free * 3, self.n_free * 3)).to_scipy_sparse()\n\n    def make_disp(self, _x: npt.ArrayLike) -> npt.NDArray[np.floating]:\n        x: npt.NDArray[np.floating] = np.asarray(_x)\n        disp: npt.NDArray[np.floating] = self.pin_disp.copy()\n        disp[self.free_mask] = x.reshape((self.n_free, 3))\n        return disp\n\n    def energy_density(self, x: npt.ArrayLike) -> jax.Array:\n        disp: npt.NDArray[np.floating] = self.make_disp(x)\n        W: jax.Array = self.model.energy_density(disp)\n        return W\n\n    @property\n    def mesh(self) -> pv.UnstructuredGrid:\n        return self.model.mesh\n\n    @property\n    def n_points(self) -> int:\n        return self.mesh.n_points\n\n    @property\n    def n_cells(self) -> int:\n        return self.mesh.n_cells\n\n    @functools.cached_property\n    def n_free(self) -> int:\n        return np.count_nonzero(self.free_mask)\n\n    @property\n    def point_data(self) -> pv.DataSetAttributes:\n        return self.mesh.point_data\n\n    @functools.cached_property\n    def free_mask(self) -> npt.NDArray[np.bool]:\n        return ~self.pin_mask\n\n    @functools.cached_property\n    def pin_disp(self) -> npt.NDArray[np.floating]:\n        pin_disp: npt.NDArray[np.floating] | None = self.point_data.get(\"pin_disp\")\n        if pin_disp is None:\n            pin_disp = np.zeros((self.n_points, 3))\n        return pin_disp\n\n    @functools.cached_property\n    def pin_mask(self) -> npt.NDArray[np.bool]:\n        pin_mask: npt.NDArray[np.bool] | None = self.point_data.get(\"pin_mask\")\n        if pin_mask is None:\n            pin_mask = np.zeros((self.n_points,), bool)\n        return pin_mask\n\n\ndef main(cfg: Config) -> None:\n    mesh: pv.UnstructuredGrid = pv.read(cfg.input)\n    problem: Problem = Problem(mesh, cfg.model)\n    res: scipy.optimize.OptimizeResult = problem.solve()\n    logger.info(\"{}\", res)\n    disp: npt.NDArray[np.floating] = problem.make_disp(res.x)\n    mesh.point_data[\"solution\"] = disp\n    mesh.cell_data[\"energy_density\"] = np.asarray(problem.model.energy_density(disp))\n    mesh.field_data[\"execution_time\"] = res[\"execution_time\"]\n    mesh.field_data[\"success\"] = res[\"success\"]\n    mesh.save(cfg.output)\n\n\nif __name__ == \"__main__\":\n    mkit.cli.run(main)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/cylinder/src/main.py",
        "start": 1,
        "end": 145,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 145,
          "column": 2,
          "position": 1562
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/main.py",
        "start": 1,
        "end": 46,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 46,
          "column": 2,
          "position": 472
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "import sys\n\nimport pyvista as pv\nfrom icecream import ic\n\n\ndef main() -> None:\n    mesh: pv.UnstructuredGrid = pv.read(sys.argv[1])\n    ic(mesh)\n    ic(mesh.point_data)\n    ic(mesh.cell_data)\n    ic(mesh.field_data)\n    ic(dict(mesh.field_data))\n\n\nif __name__ == \"__main__\":\n    main()",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/cylinder/src/info.py",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 2,
          "position": 112
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/info.py",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 2,
          "position": 112
        }
      }
    },
    {
      "format": "python",
      "lines": 35,
      "fragment": "Path\n\n\ndef main(cfg: Config) -> None:\n    surface: pv.PolyData\n    match cfg.deform:\n        case \"squash\":\n            surface = pv.Cylinder(height=2)\n        case \"stretch\":\n            surface = pv.Cylinder()\n        case \"twist\":\n            surface = pv.Box((-2, 2, -1, 1, -1, 1))\n    surface.triangulate(inplace=True, progress_bar=True)\n    tetmesh: pv.UnstructuredGrid = mkit.ext.tetwild(surface)\n    surface = tetmesh.extract_surface(progress_bar=True)\n    left_mask: npt.NDArray[np.bool] = surface.points[:, 0] < surface.bounds[0] + 1e-3\n    right_mask: npt.NDArray[np.bool] = surface.points[:, 0] > surface.bounds[1] - 1e-3\n    surface.point_data[\"pin_mask\"] = left_mask | right_mask\n    pin_disp: npt.NDArray[np.floating] = np.zeros((surface.n_points, 3))\n    match cfg.deform:\n        case \"squash\":\n            pin_disp[left_mask] = [0.5, 0, 0]\n            pin_disp[right_mask] = [-0.5, 0, 0]\n        case \"stretch\":\n            pin_disp[left_mask] = [-0.5, 0, 0]\n            pin_disp[right_mask] = [0.5, 0, 0]\n        case \"twist\":\n            left_points: pv.PointSet = pv.PointSet(surface.points[left_mask])\n            left_points.rotate_x(-90, inplace=True)\n            pin_disp[left_mask] = left_points.points - surface.points[left_mask]\n            right_points: pv.PointSet = pv.PointSet(surface.points[right_mask])\n            right_points.rotate_x(90, inplace=True)\n            pin_disp[right_mask] = right_points.points - surface.points[right_mask]\n    surface.point_data[\"pin_disp\"] = pin_disp\n    tetmesh = mkit.transfer",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/08/07/cylinder/src/gen.py",
        "start": 15,
        "end": 49,
        "startLoc": {
          "line": 15,
          "column": 2,
          "position": 95
        },
        "endLoc": {
          "line": 49,
          "column": 9,
          "position": 611
        }
      },
      "secondFile": {
        "name": "exp/2024/09/01/cylinder/src/gen.py",
        "start": 13,
        "end": 47,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 81
        },
        "endLoc": {
          "line": 47,
          "column": 4,
          "position": 597
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n\n    def solve(self) -> OptimizeResult:\n        x0: npt.NDArray[np.float64] = np.zeros((self.n_free, 3))\n        res: OptimizeResult = scipy.optimize.minimize(\n            self.fun,\n            x0.flatten(),\n            method=\"trust-constr\",\n            jac=self.jac,\n            hess=self.hess,\n            # constraints=[self.slide_constraint],",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 88,
        "end": 98,
        "startLoc": {
          "line": 88,
          "column": 9,
          "position": 939
        },
        "endLoc": {
          "line": 98,
          "column": 39,
          "position": 1037
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 63,
        "end": 73,
        "startLoc": {
          "line": 63,
          "column": 8,
          "position": 576
        },
        "endLoc": {
          "line": 73,
          "column": 8,
          "position": 674
        }
      }
    },
    {
      "format": "python",
      "lines": 62,
      "fragment": "options={\"disp\": True, \"verbose\": 2},\n            callback=self.callback,\n        )\n        # import cyipopt\n\n        # A: scipy.sparse.coo_matrix = self.slide_constraint.A\n        # ic(A.dtype)\n        # res: OptimizeResult = cyipopt.minimize_ipopt(\n        #     self.fun,\n        #     x0.flatten(),\n        #     jac=self.jac,\n        #     hess=self.hess,\n        #     constraints=[\n        #         # self.slide_constraint\n        #         {\n        #             \"type\": \"eq\",\n        #             \"fun\": lambda x: A @ x,\n        #             \"jac\": lambda x: scipy.sparse.coo_array(A),\n        #             \"hess\": lambda x, v: np.zeros((self.n_free * 3,)),\n        #         }\n        #     ],\n        #     options={\"print_level\": 5, \"max_wall_time\": 300.0},\n        # )\n        return res\n\n    @mkit.logging.log_time\n    def fun(self, x: npt.ArrayLike) -> float:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        energy: jax.Array = self.model.energy(self.energy_fn, disp)\n        return float(energy)\n\n    @mkit.logging.log_time\n    def jac(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        jac: jax.Array = self.model.energy_jac(self.energy_fn, disp)\n        return np.asarray(jac[self.free_mask].flatten())\n\n    @mkit.logging.log_time\n    def hess(self, x: npt.ArrayLike) -> scipy.sparse.coo_matrix:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        hess: sparse.COO = self.model.energy_hess(self.energy_fn, disp)\n        hess = mkit.sparse.sparse_mask(\n            hess,\n            (\n                self.free_mask,\n                np.ones((3,), np.bool),\n                self.free_mask,\n                np.ones((3,), np.bool),\n            ),\n        )\n        return hess.reshape((self.n_free * 3, self.n_free * 3)).to_scipy_sparse()\n\n    def callback(self, intermediate_result: OptimizeResult) -> None:\n        # ic(intermediate_result)\n        pass\n\n    @functools.cached_property\n    def n_free(self) -> int:\n        return np.count_nonzero(self.free_mask)\n\n    @functools.cached_property\n    def n_slide",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 99,
        "end": 160,
        "startLoc": {
          "line": 99,
          "column": 13,
          "position": 1040
        },
        "endLoc": {
          "line": 160,
          "column": 8,
          "position": 1567
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 73,
        "end": 133,
        "startLoc": {
          "line": 73,
          "column": 13,
          "position": 674
        },
        "endLoc": {
          "line": 133,
          "column": 6,
          "position": 1192
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\n\n    def make_disp(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = np.zeros((self.model.n_points, 3))\n        disp[self.free_mask] = np.asarray(x).reshape((self.n_free, 3))\n        return disp\n\n    @functools.cached_property\n    def free_mask(self) -> npt.NDArray[np.bool]:\n        return ~self.pin_mask\n\n    @functools.cached_property\n    def pin_mask(self) -> npt.NDArray[np.bool]:\n        return np.asarray(self.model.point_data[\"pin_mask\"], np.bool)\n\n    @functools",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 161,
        "end": 176,
        "startLoc": {
          "line": 161,
          "column": 11,
          "position": 1588
        },
        "endLoc": {
          "line": 176,
          "column": 11,
          "position": 1771
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 131,
        "end": 147,
        "startLoc": {
          "line": 131,
          "column": 10,
          "position": 1190
        },
        "endLoc": {
          "line": 147,
          "column": 4,
          "position": 1373
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\nres: OptimizeResult = problem.solve()\nic(res)\ndisp: npt.NDArray[np.float64] = problem.make_disp(res.x)\nmesh.point_data[\"solution\"] = disp\nmesh.cell_data[\"energy_density\"] = problem.model.energy_density(  # pyright: ignore [reportArgumentType]\n    CellEnergyFn(corotated), disp\n)\n\nmesh.save(\"solution.vtu\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 181,
        "end": 190,
        "startLoc": {
          "line": 181,
          "column": 2,
          "position": 1833
        },
        "endLoc": {
          "line": 190,
          "column": 15,
          "position": 1921
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 149,
        "end": 158,
        "startLoc": {
          "line": 149,
          "column": 5,
          "position": 1410
        },
        "endLoc": {
          "line": 158,
          "column": 23,
          "position": 1505
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\nmesh_warp: pv.UnstructuredGrid = mesh.warp_by_vector(\"solution\", progress_bar=True)\nmesh_clip: pv.UnstructuredGrid = mesh_warp.clip(\n    \"-x\", (0, 0, 0), progress_bar=True, crinkle=True\n)\npl = pv.Plotter(off_screen=True)\npl.add_axes()  # pyright: ignore [reportCallIssue]\npl.add_mesh(mesh_clip, scalars=\"energy_density\", name=\"mesh\")\ncamera: pv.Camera = pl.camera\ncamera.tight(0.2, view=\"zy\")\ncamera.to_paraview_pvcc(\"camera.pvcc\")\npl.camera = pv.Camera.from_paraview_pvcc(\"camera.pvcc\")\npl.screenshot(\"nonhomogeneous.png\"",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous-plot.py",
        "start": 3,
        "end": 15,
        "startLoc": {
          "line": 3,
          "column": 15,
          "position": 23
        },
        "endLoc": {
          "line": 15,
          "column": 21,
          "position": 175
        }
      },
      "secondFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/plot.py",
        "start": 3,
        "end": 15,
        "startLoc": {
          "line": 3,
          "column": 12,
          "position": 23
        },
        "endLoc": {
          "line": 15,
          "column": 12,
          "position": 175
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": "import dataclasses\nimport functools\nfrom typing import TYPE_CHECKING\n\nimport numpy as np\nimport numpy.typing as npt\nimport pyvista as pv\nimport rich\nimport rich.traceback\nimport scipy\nimport scipy.optimize\nimport scipy.sparse\nimport sparse\nimport taichi as ti\nfrom icecream import ic\nfrom omegaconf import OmegaConf\nfrom scipy.optimize import LinearConstraint, OptimizeResult\n\nimport mkit.ext\nimport mkit.logging\nimport mkit.point\nimport mkit.sparse\nfrom mkit.physics.energy import gravity\nfrom mkit.physics.energy.abc import CellEnergyFn\nfrom mkit.physics.energy.elastic import corotated\nfrom mkit.physics.model import Model\n\nif TYPE_CHECKING:\n    import jax\n\nti.init()\nmkit.logging.init()\nrich.traceback.install(show_locals=True)\n\n\n@dataclasses.dataclass(kw_only=True)\nclass Config:\n    mu: float = 1e3\n    lambda_: float = 3e3\n\n\ncfg: Config = OmegaConf.structured(Config)\ncfg = OmegaConf.merge(cfg, OmegaConf.from_cli())\nic(cfg)\n\ninner: pv.PolyData = pv.Icosphere(radius=0.1)\ninner.point_data[\"pin_mask\"] = np.ones((inner.n_points,), bool)\ninner",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/main.py",
        "start": 1,
        "end": 48,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 48,
          "column": 6,
          "position": 342
        }
      },
      "secondFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 1,
        "end": 48,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 48,
          "column": 58,
          "position": 342
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "inner.point_data[\"pin_mask\"] &= ~inner.point_data[\"slide_mask\"]\ninner.point_data[\"normal\"] = inner.point_normals\n\nouter: pv.PolyData = pv.Icosphere(radius=0.2)\nouter.point_data[\"pin_mask\"] = np.zeros((outer.n_points,), bool)\nouter.point_data[\"slide_mask\"] = np.zeros((outer.n_points,), bool)\nouter.point_data[\"normal\"] = outer.point_normals\n\nmesh: pv.UnstructuredGrid = mkit.ext.tetwild_wrapped(outer, inner)",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/main.py",
        "start": 50,
        "end": 58,
        "startLoc": {
          "line": 50,
          "column": 1,
          "position": 367
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 498
        }
      },
      "secondFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 50,
        "end": 58,
        "startLoc": {
          "line": 50,
          "column": 1,
          "position": 368
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 499
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ")\nic(mesh)\nmesh.cell_data[\"mu\"] = np.full((mesh.n_cells,), cfg.mu)\nmesh.cell_data[\"lambda\"] = np.full((mesh.n_cells,), cfg.lambda_)\nmesh.cell_data[\"density\"] = np.full((mesh.n_cells,), 1e3)\nmesh.cell_data[\"gravity\"] = np.tile(np.asarray([0, -9.8, 0]), (mesh.n_cells, 1))\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/main.py",
        "start": 58,
        "end": 66,
        "startLoc": {
          "line": 58,
          "column": 6,
          "position": 498
        },
        "endLoc": {
          "line": 66,
          "column": 6,
          "position": 623
        }
      },
      "secondFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 58,
        "end": 57,
        "startLoc": {
          "line": 58,
          "column": 5,
          "position": 504
        },
        "endLoc": {
          "line": 57,
          "column": 5,
          "position": 642
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "class Problem:\n    model: Model\n    energy_fn: CellEnergyFn\n\n    def __init__(self) -> None:\n        self.model = Model(mesh)\n        self.energy_fn = CellEnergyFn(corotated) + CellEnergyFn(gravity)\n\n        point_normal: npt.NDArray[np.float64] = np.asarray(\n            self.model.point_data[\"normal\"]\n        )\n        A: sparse.COO = sparse.COO(\n            (np.repeat(np.arange(self.n_free), 3), np.arange(self.n_free * 3)),\n            point_normal[self.free_mask].flatten(),\n        )\n        A = A[self.slide_mask[self.free_mask], :]\n        self.slide_constraint = LinearConstraint(\n            A.reshape((self.n_slide, self.n_free * 3)).to_scipy_sparse(), lb=0, ub=0\n        )\n\n    def solve(self) -> OptimizeResult:\n        x0: npt.NDArray[np.float64] = np.zeros((self.n_free, 3))\n        res: OptimizeResult = scipy.optimize.minimize(\n            self.fun,\n            x0.flatten(),\n            method=\"trust-constr\",\n            jac=self.jac,\n            hess=self.hess,\n            constraints",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/main.py",
        "start": 66,
        "end": 94,
        "startLoc": {
          "line": 66,
          "column": 1,
          "position": 623
        },
        "endLoc": {
          "line": 94,
          "column": 12,
          "position": 950
        }
      },
      "secondFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/nonhomogeneous.py",
        "start": 70,
        "end": 73,
        "startLoc": {
          "line": 70,
          "column": 1,
          "position": 710
        },
        "endLoc": {
          "line": 73,
          "column": 8,
          "position": 674
        }
      }
    },
    {
      "format": "python",
      "lines": 93,
      "fragment": ",\n            options={\"disp\": True, \"verbose\": 2},\n            callback=self.callback,\n        )\n        # import cyipopt\n\n        # A: scipy.sparse.coo_matrix = self.slide_constraint.A\n        # ic(A.dtype)\n        # res: OptimizeResult = cyipopt.minimize_ipopt(\n        #     self.fun,\n        #     x0.flatten(),\n        #     jac=self.jac,\n        #     hess=self.hess,\n        #     constraints=[\n        #         # self.slide_constraint\n        #         {\n        #             \"type\": \"eq\",\n        #             \"fun\": lambda x: A @ x,\n        #             \"jac\": lambda x: scipy.sparse.coo_array(A),\n        #             \"hess\": lambda x, v: np.zeros((self.n_free * 3,)),\n        #         }\n        #     ],\n        #     options={\"print_level\": 5, \"max_wall_time\": 300.0},\n        # )\n        return res\n\n    @mkit.logging.log_time\n    def fun(self, x: npt.ArrayLike) -> float:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        energy: jax.Array = self.model.energy(self.energy_fn, disp)\n        return float(energy)\n\n    @mkit.logging.log_time\n    def jac(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        jac: jax.Array = self.model.energy_jac(self.energy_fn, disp)\n        return np.asarray(jac[self.free_mask].flatten())\n\n    @mkit.logging.log_time\n    def hess(self, x: npt.ArrayLike) -> scipy.sparse.coo_matrix:\n        disp: npt.NDArray[np.float64] = self.make_disp(x)\n        hess: sparse.COO = self.model.energy_hess(self.energy_fn, disp)\n        hess = mkit.sparse.sparse_mask(\n            hess,\n            (\n                self.free_mask,\n                np.ones((3,), np.bool),\n                self.free_mask,\n                np.ones((3,), np.bool),\n            ),\n        )\n        return hess.reshape((self.n_free * 3, self.n_free * 3)).to_scipy_sparse()\n\n    def callback(self, intermediate_result: OptimizeResult) -> None:\n        # ic(intermediate_result)\n        pass\n\n    @functools.cached_property\n    def n_free(self) -> int:\n        return np.count_nonzero(self.free_mask)\n\n    @functools.cached_property\n    def n_slide(self) -> int:\n        return np.count_nonzero(self.slide_mask)\n\n    def make_disp(self, x: npt.ArrayLike) -> npt.NDArray[np.float64]:\n        disp: npt.NDArray[np.float64] = np.zeros((self.model.n_points, 3))\n        disp[self.free_mask] = np.asarray(x).reshape((self.n_free, 3))\n        return disp\n\n    @functools.cached_property\n    def free_mask(self) -> npt.NDArray[np.bool]:\n        return ~self.pin_mask\n\n    @functools.cached_property\n    def pin_mask(self) -> npt.NDArray[np.bool]:\n        return np.asarray(self.model.point_data[\"pin_mask\"], np.bool)\n\n    @functools.cached_property\n    def slide_mask(self) -> npt.NDArray[np.bool]:\n        return np.asarray(self.model.point_data[\"slide_mask\"], np.bool) & ~self.pin_mask\n\n\nproblem = Problem()\nres: OptimizeResult = problem.solve()\nic(res)\ndisp: npt.NDArray[np.float64] = problem.make_disp(res.x)\nmesh.point_data[\"solution\"] = disp\nmesh.cell_data[\"energy_density\"] = problem.model.energy_density(  # pyright: ignore [reportArgumentType]\n    CellEnergyFn(corotated), disp\n)\n\nmesh.save(\"solution.vtu\")",
      "tokens": 0,
      "firstFile": {
        "name": "exp/2024/07/10/nonhomogeneous/src/main.py",
        "start": 94,
        "end": 186,
        "startLoc": {
          "line": 94,
          "column": 2,
          "position": 957
        },
        "endLoc": {
          "line": 186,
          "column": 2,
          "position": 1842
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/neo-hookean.py",
        "start": 72,
        "end": 190,
        "startLoc": {
          "line": 72,
          "column": 5,
          "position": 671
        },
        "endLoc": {
          "line": 190,
          "column": 2,
          "position": 1922
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike],\n    cell_data: Mapping[str, jxt.ArrayLike],\n    field_data: Mapping[str, jxt.ArrayLike],\n) -> jax.Array:\n    lambda_",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/elastic/_wikipedia.py",
        "start": 30,
        "end": 37,
        "startLoc": {
          "line": 30,
          "column": 23,
          "position": 322
        },
        "endLoc": {
          "line": 37,
          "column": 8,
          "position": 398
        }
      },
      "secondFile": {
        "name": "src/mkit/physics/energy/elastic/_wikipedia.py",
        "start": 12,
        "end": 19,
        "startLoc": {
          "line": 12,
          "column": 7,
          "position": 67
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 143
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike],\n    cell_data: Mapping[str, jxt.ArrayLike],\n    field_data: Mapping[str, jxt.ArrayLike],\n) -> jax.Array:\n    \"\"\"Corotated (Stomakhin 2012).\n\n    Reference:\n        1. Chen, Yizhou, et al. \"Position-Based Nonlinear Gauss-Seidel for Quasistatic Hyperelasticity.\" arXiv preprint arXiv:2306.09021 (2023).\n        2. Stomakhin, Alexey, et al. \"Energetically Consistent Invertible Elasticity.\" Symposium on Computer Animation. Vol. 1. No. 2. 2012.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/elastic/_chen.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 10,
          "position": 87
        },
        "endLoc": {
          "line": 26,
          "column": 8,
          "position": 163
        }
      },
      "secondFile": {
        "name": "src/mkit/physics/energy/elastic/_wikipedia.py",
        "start": 12,
        "end": 19,
        "startLoc": {
          "line": 12,
          "column": 7,
          "position": 67
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 143
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike],\n    cell_data: Mapping[str, jxt.ArrayLike],\n    field_data: Mapping[str, jxt.ArrayLike],\n) -> jax.Array:\n    \"\"\"Neo-Hookean (Macklin 2021).\n\n    Reference:\n        1. Chen, Yizhou, et al. \"Position-Based Nonlinear Gauss-Seidel for Quasistatic Hyperelasticity.\" arXiv preprint arXiv:2306.09021 (2023).\n        2. Macklin, Miles, and Matthias Muller. \"A constraint-based formulation of stable neo-hookean materials.\" Proceedings of the 14th ACM SIGGRAPH conference on motion, interaction and games. 2021.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/elastic/_chen.py",
        "start": 39,
        "end": 51,
        "startLoc": {
          "line": 39,
          "column": 12,
          "position": 340
        },
        "endLoc": {
          "line": 51,
          "column": 8,
          "position": 416
        }
      },
      "secondFile": {
        "name": "src/mkit/physics/energy/elastic/_wikipedia.py",
        "start": 12,
        "end": 19,
        "startLoc": {
          "line": 12,
          "column": 7,
          "position": 67
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 143
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(\n    disp: jxt.ArrayLike,\n    points: jxt.ArrayLike,\n    point_data: Mapping[str, jxt.ArrayLike],\n    cell_data: Mapping[str, jxt.ArrayLike],\n    field_data: Mapping[str, jxt.ArrayLike],\n) -> jax.Array:\n    \"\"\"Stable Neo-Hookean (Smith 2018).\n\n    Reference:\n        1. Chen, Yizhou, et al. \"Position-Based Nonlinear Gauss-Seidel for Quasistatic Hyperelasticity.\" arXiv preprint arXiv:2306.09021 (2023).\n        2. Smith, Breannan, Fernando De Goes, and Theodore Kim. \"Stable neo-hookean flesh simulation.\" ACM Transactions on Graphics (TOG) 37.2 (2018): 1-15.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/elastic/_chen.py",
        "start": 66,
        "end": 78,
        "startLoc": {
          "line": 66,
          "column": 19,
          "position": 632
        },
        "endLoc": {
          "line": 78,
          "column": 8,
          "position": 708
        }
      },
      "secondFile": {
        "name": "src/mkit/physics/energy/elastic/_wikipedia.py",
        "start": 12,
        "end": 19,
        "startLoc": {
          "line": 12,
          "column": 7,
          "position": 67
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 143
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "_: Any\n    lambda_: jax.Array = jnp.asarray(cell_data[\"lambda\"])\n    mu: jax.Array = jnp.asarray(cell_data[\"mu\"])\n    lambda_hat: jax.Array = mu + lambda_\n    F: jax.Array = tetra.deformation_gradient(disp, points)  # (3, 3)\n    C: jax.Array = tetra.cauchy_strain(F)  # (3, 3)\n    J: jax.Array = jnp.linalg.det(F)  # ()\n    I1_C: jax.Array  # (3, 3)\n    I1_C, _, _ = m.invariants(C)\n    W: jax.Array = 0.5 * mu * I1_C + 0.5 * lambda_hat * (J - 1 - mu / lambda_hat) ** 2\n    return W",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/elastic/_chen.py",
        "start": 79,
        "end": 89,
        "startLoc": {
          "line": 79,
          "column": 5,
          "position": 711
        },
        "endLoc": {
          "line": 89,
          "column": 2,
          "position": 915
        }
      },
      "secondFile": {
        "name": "src/mkit/physics/energy/elastic/_chen.py",
        "start": 52,
        "end": 62,
        "startLoc": {
          "line": 52,
          "column": 5,
          "position": 419
        },
        "endLoc": {
          "line": 62,
          "column": 2,
          "position": 623
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "def _preprocess(mesh: Any, weight: nt.FN3Like | None = None) -> tm.Trimesh:\n    if weight is not None:\n        logger.warning(\"Weight is not supported, using mask instead.\")\n    mesh: tm.Trimesh = mkit.io.trimesh.as_trimesh(\n        mkit.ops.registration.preprocess.mask_points(mesh, weight)\n    )\n    return mesh",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/ops/registration/rigid/_main.py",
        "start": 60,
        "end": 66,
        "startLoc": {
          "line": 60,
          "column": 1,
          "position": 541
        },
        "endLoc": {
          "line": 66,
          "column": 5,
          "position": 637
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/registration/rigid/_trimesh.py",
        "start": 43,
        "end": 49,
        "startLoc": {
          "line": 43,
          "column": 1,
          "position": 341
        },
        "endLoc": {
          "line": 49,
          "column": 5,
          "position": 437
        }
      }
    },
    {
      "format": "python",
      "lines": 59,
      "fragment": "from jaxtyping import Bool, Float, Integer, Shaped\n\nfrom mkit.typing.array import (\n    ArrayLike,\n    BLike,\n    BNLike,\n    F3Like,\n    F4Like,\n    F33Like,\n    F34Like,\n    F43Like,\n    F44Like,\n    FLike,\n    FMN3Like,\n    FMNLike,\n    FN3Like,\n    FNLike,\n    FNNLike,\n    I2Like,\n    I3Like,\n    I4Like,\n    ILike,\n    IN2Like,\n    IN3Like,\n    IN4Like,\n    INLike,\n    is_array_like,\n)\n\n__all__ = [\n    \"ArrayLike\",\n    \"BLike\",\n    \"BNLike\",\n    \"Bool\",\n    \"F3Like\",\n    \"F4Like\",\n    \"F33Like\",\n    \"F34Like\",\n    \"F43Like\",\n    \"F44Like\",\n    \"FLike\",\n    \"FMN3Like\",\n    \"FMNLike\",\n    \"FN3Like\",\n    \"FNLike\",\n    \"FNNLike\",\n    \"Float\",\n    \"I2Like\",\n    \"I3Like\",\n    \"I4Like\",\n    \"ILike\",\n    \"IN2Like\",\n    \"IN3Like\",\n    \"IN4Like\",\n    \"INLike\",\n    \"Integer\",\n    \"Shaped\",\n    \"is_array_like\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/typing/numpy/_export.py",
        "start": 1,
        "end": 59,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 59,
          "column": 2,
          "position": 247
        }
      },
      "secondFile": {
        "name": "src/mkit/typing/torch/_export.py",
        "start": 1,
        "end": 59,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 59,
          "column": 2,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 59,
      "fragment": "from jaxtyping import Bool, Float, Integer, Shaped\n\nfrom mkit.typing.array import (\n    ArrayLike,\n    BLike,\n    BNLike,\n    F3Like,\n    F4Like,\n    F33Like,\n    F34Like,\n    F43Like,\n    F44Like,\n    FLike,\n    FMN3Like,\n    FMNLike,\n    FN3Like,\n    FNLike,\n    FNNLike,\n    I2Like,\n    I3Like,\n    I4Like,\n    ILike,\n    IN2Like,\n    IN3Like,\n    IN4Like,\n    INLike,\n    is_array_like,\n)\n\n__all__ = [\n    \"ArrayLike\",\n    \"BLike\",\n    \"BNLike\",\n    \"Bool\",\n    \"F3Like\",\n    \"F4Like\",\n    \"F33Like\",\n    \"F34Like\",\n    \"F43Like\",\n    \"F44Like\",\n    \"FLike\",\n    \"FMN3Like\",\n    \"FMNLike\",\n    \"FN3Like\",\n    \"FNLike\",\n    \"FNNLike\",\n    \"Float\",\n    \"I2Like\",\n    \"I3Like\",\n    \"I4Like\",\n    \"ILike\",\n    \"IN2Like\",\n    \"IN3Like\",\n    \"IN4Like\",\n    \"INLike\",\n    \"Integer\",\n    \"Shaped\",\n    \"is_array_like\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/typing/jax/_export.py",
        "start": 1,
        "end": 59,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 59,
          "column": 2,
          "position": 247
        }
      },
      "secondFile": {
        "name": "src/mkit/typing/torch/_export.py",
        "start": 1,
        "end": 59,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 59,
          "column": 2,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "def solve(self) -> scipy.optimize.OptimizeResult:\n        x0: npt.NDArray[np.floating] = np.zeros((self.n_free, 3))\n        try:\n            res: scipy.optimize.OptimizeResult = scipy.optimize.minimize(\n                self.fun,\n                x0.flatten(),\n                method=\"trust-constr\",\n                jac=self.jac,\n                hess=self.hess,\n                options={\"disp\": True,",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/model/_problem.py",
        "start": 46,
        "end": 55,
        "startLoc": {
          "line": 46,
          "column": 5,
          "position": 414
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 527
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/main.py",
        "start": 41,
        "end": 50,
        "startLoc": {
          "line": 41,
          "column": 5,
          "position": 303
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 416
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "},\n            )\n        except Exception as e:\n            res = scipy.optimize.OptimizeResult()\n            res[\"execution_time\"] = np.nan\n            res[\"message\"] = str(e)\n            res[\"success\"] = False\n            res[\"x\"] = x0.flatten()\n        return res\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/model/_problem.py",
        "start": 55,
        "end": 65,
        "startLoc": {
          "line": 55,
          "column": 2,
          "position": 533
        },
        "endLoc": {
          "line": 65,
          "column": 4,
          "position": 618
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/main.py",
        "start": 50,
        "end": 59,
        "startLoc": {
          "line": 50,
          "column": 5,
          "position": 416
        },
        "endLoc": {
          "line": 59,
          "column": 5,
          "position": 500
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "return res\n\n    def fun(self, x: npt.ArrayLike) -> jax.Array:\n        disp: npt.NDArray[np.floating] = self.make_disp(x)\n        energy: jax.Array = self.model.energy(disp)\n        return energy\n\n    def jac(self, x: npt.ArrayLike) -> jax.Array:\n        disp: npt.NDArray[np.floating] = self.make_disp(x)\n        jac: jax.Array = self.model.energy_jac(disp)\n        return jac[self.free_mask].flatten()\n\n    def hess(self, x: npt.ArrayLike",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/model/_problem.py",
        "start": 63,
        "end": 75,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 612
        },
        "endLoc": {
          "line": 75,
          "column": 10,
          "position": 781
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/linear-vs-hyper/src/main.py",
        "start": 60,
        "end": 72,
        "startLoc": {
          "line": 60,
          "column": 13,
          "position": 504
        },
        "endLoc": {
          "line": 72,
          "column": 8,
          "position": 673
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "disp: jxt.ArrayLike,\n        points: jxt.ArrayLike,\n        point_data: Mapping[str, jxt.ArrayLike],\n        cell_data: Mapping[str, jxt.ArrayLike],\n        field_data: Mapping[str, jxt.ArrayLike],\n    ) -> jax.Array: .",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/_abc.py",
        "start": 12,
        "end": 17,
        "startLoc": {
          "line": 12,
          "column": 9,
          "position": 61
        },
        "endLoc": {
          "line": 17,
          "column": 2,
          "position": 134
        }
      },
      "secondFile": {
        "name": "src/mkit/physics/energy/elastic/_wikipedia.py",
        "start": 13,
        "end": 19,
        "startLoc": {
          "line": 13,
          "column": 5,
          "position": 70
        },
        "endLoc": {
          "line": 19,
          "column": 2,
          "position": 143
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "disp: jxt.ArrayLike,\n        points: jxt.ArrayLike,\n        point_data: Mapping[str, jxt.ArrayLike] = {},\n        cell_data: Mapping[str, jxt.ArrayLike] = {},\n        field_data: Mapping[str, jxt.ArrayLike] = {},\n    ) -> jax.Array: .",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/_abc.py",
        "start": 23,
        "end": 28,
        "startLoc": {
          "line": 23,
          "column": 9,
          "position": 159
        },
        "endLoc": {
          "line": 28,
          "column": 2,
          "position": 247
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 19,
        "end": 25,
        "startLoc": {
          "line": 19,
          "column": 5,
          "position": 165
        },
        "endLoc": {
          "line": 25,
          "column": 8,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(\n            disp: jxt.ArrayLike,\n            points: jxt.ArrayLike,\n            point_data: Mapping[str, jxt.ArrayLike] = {},\n            cell_data: Mapping[str, jxt.ArrayLike] = {},\n            field_data: Mapping[str, jxt.ArrayLike] = {},\n        ) -> jax.Array:\n            return",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/_abc.py",
        "start": 41,
        "end": 48,
        "startLoc": {
          "line": 41,
          "column": 8,
          "position": 382
        },
        "endLoc": {
          "line": 48,
          "column": 7,
          "position": 474
        }
      },
      "secondFile": {
        "name": "exp/2024/08/07/elasticity/src/plot-stress.py",
        "start": 18,
        "end": 25,
        "startLoc": {
          "line": 18,
          "column": 7,
          "position": 162
        },
        "endLoc": {
          "line": 25,
          "column": 8,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "def __call__(\n        self,\n        disp: jxt.ArrayLike,\n        points: jxt.ArrayLike,\n        point_data: Mapping[str, jxt.ArrayLike] = {},\n        cell_data: Mapping[str, jxt.ArrayLike] = {},\n        field_data: Mapping[str, jxt.ArrayLike] = {},\n    ) -> jax.Array:\n        \"\"\"(4, 3) -> ().\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/physics/energy/_abc.py",
        "start": 71,
        "end": 79,
        "startLoc": {
          "line": 71,
          "column": 5,
          "position": 671
        },
        "endLoc": {
          "line": 79,
          "column": 20,
          "position": 770
        }
      },
      "secondFile": {
        "name": "src/mkit/physics/energy/_abc.py",
        "start": 21,
        "end": 25,
        "startLoc": {
          "line": 21,
          "column": 5,
          "position": 149
        },
        "endLoc": {
          "line": 25,
          "column": 8,
          "position": 253
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "):\n    distance_threshold: float = 0.1\n    fill_value: nt.ArrayLike = np.nan\n\n    def __call__(\n        self, source: Any, target: Any, data: AttributesLike | None = None\n    ) -> dict[str, AttributeArray]:\n        if not data:\n            return {}\n        raise",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/ops/transfer/_nearest.py",
        "start": 51,
        "end": 60,
        "startLoc": {
          "line": 51,
          "column": 10,
          "position": 521
        },
        "endLoc": {
          "line": 60,
          "column": 6,
          "position": 614
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/transfer/_nearest.py",
        "start": 18,
        "end": 27,
        "startLoc": {
          "line": 18,
          "column": 10,
          "position": 120
        },
        "endLoc": {
          "line": 27,
          "column": 7,
          "position": 213
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "(C2CMethod):\n    distance_threshold: float = 0.1\n    fill_value: nt.ArrayLike = np.nan\n\n    def __call__(\n        self, source: Any, target: Any, data: AttributesLike | None = None\n    ) -> dict[str, AttributeArray]:\n        if not data:\n            return {}\n        raise NotImplementedError",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/ops/transfer/_barycentric.py",
        "start": 15,
        "end": 24,
        "startLoc": {
          "line": 15,
          "column": 15,
          "position": 98
        },
        "endLoc": {
          "line": 24,
          "column": 20,
          "position": 195
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/transfer/_nearest.py",
        "start": 18,
        "end": 60,
        "startLoc": {
          "line": 18,
          "column": 11,
          "position": 118
        },
        "endLoc": {
          "line": 60,
          "column": 20,
          "position": 616
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "(P2PMethod):\n    distance_threshold: float = 0.1\n    fill_value: nt.ArrayLike = np.nan\n\n    def __call__(\n        self, source: Any, target: Any, data: AttributesLike | None = None\n    ) -> dict[str, AttributeArray]:\n        if not data:\n            return {}\n        source: tm",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/ops/transfer/_barycentric.py",
        "start": 28,
        "end": 37,
        "startLoc": {
          "line": 28,
          "column": 15,
          "position": 211
        },
        "endLoc": {
          "line": 37,
          "column": 3,
          "position": 309
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/transfer/_nearest.py",
        "start": 51,
        "end": 27,
        "startLoc": {
          "line": 51,
          "column": 11,
          "position": 519
        },
        "endLoc": {
          "line": 27,
          "column": 3,
          "position": 216
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "):\n    distance_threshold: float = 0.1\n    fill_value: npt.ArrayLike = np.nan\n\n    def __call__(\n        self,\n        source: Any,\n        target: Any,\n        data: AttributesLike | None = None,\n    ) -> dict[str, AttributeArray]:\n        if not data:\n            return {}\n        float_data: dict[str, FloatAttributeArray]\n        int_data: dict[str, IntAttributeArray]\n        float_data, int_data = _split_data(data)\n        return {\n            **self.barycentric(source, target, float_data),\n            **self.nearest(source, target, int_data),\n        }\n\n    @property\n    def barycentric(self) -> P2PBarycentric",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/ops/transfer/_auto.py",
        "start": 52,
        "end": 73,
        "startLoc": {
          "line": 52,
          "column": 10,
          "position": 425
        },
        "endLoc": {
          "line": 73,
          "column": 15,
          "position": 614
        }
      },
      "secondFile": {
        "name": "src/mkit/ops/transfer/_auto.py",
        "start": 18,
        "end": 39,
        "startLoc": {
          "line": 18,
          "column": 10,
          "position": 152
        },
        "endLoc": {
          "line": 39,
          "column": 15,
          "position": 341
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "points: list[list[float]] = []\n    faces: list[list[int]] = []\n    group_ids: list[int] = []\n    group_names: list[str] = []\n    current_group_id: int = 0\n    for line in mkit.utils.strip_comments(fpath",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/io/pyvista/_obj.py",
        "start": 16,
        "end": 21,
        "startLoc": {
          "line": 16,
          "column": 5,
          "position": 108
        },
        "endLoc": {
          "line": 21,
          "column": 6,
          "position": 192
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/io-obj/src/main.py",
        "start": 17,
        "end": 22,
        "startLoc": {
          "line": 17,
          "column": 5,
          "position": 99
        },
        "endLoc": {
          "line": 22,
          "column": 4,
          "position": 183
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "fpath.read_text()):\n        cmd: str\n        values: list[str]\n        cmd, *values = line.split()\n        match cmd:\n            case \"v\":\n                points.append([float(v) for v in values])\n            case \"f\":\n                faces.append(parse_f(values))\n                if len(group_names) == 0:\n                    group_names.append(\"\")\n                group_ids.append(current_group_id)\n            case \"g\":\n                if len(values) >= 1:\n                    if (name := values[0]) in group_names:\n                        current_group_id = group_names.index(name)\n                    else:\n                        group_names.append(name)\n                        current_group_id = len(group_names) - 1\n                else:\n                    group_names.append(\"\")\n                    current_group_id = len(group_names) - 1\n            case \"vt\" | \"vn\":\n                # TODO: load `vt`, `vn`",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/io/pyvista/_obj.py",
        "start": 21,
        "end": 44,
        "startLoc": {
          "line": 21,
          "column": 2,
          "position": 192
        },
        "endLoc": {
          "line": 44,
          "column": 24,
          "position": 423
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/io-obj/src/main.py",
        "start": 22,
        "end": 45,
        "startLoc": {
          "line": 22,
          "column": 2,
          "position": 185
        },
        "endLoc": {
          "line": 45,
          "column": 7,
          "position": 416
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "case _:\n                logger.warning(\"Unknown element: {}\", line)\n    mesh: pv.PolyData = pv.PolyData.from_irregular_faces(points, faces)\n    if len(group_names) > 1 or group_names[0] != \"\":\n        mesh.cell_data[\"GroupIds\"] = group_ids\n        mesh.field_data[\"GroupNames\"] = group_names\n    return",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/io/pyvista/_obj.py",
        "start": 46,
        "end": 52,
        "startLoc": {
          "line": 46,
          "column": 13,
          "position": 429
        },
        "endLoc": {
          "line": 52,
          "column": 7,
          "position": 516
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/io-obj/src/main.py",
        "start": 46,
        "end": 52,
        "startLoc": {
          "line": 46,
          "column": 13,
          "position": 427
        },
        "endLoc": {
          "line": 52,
          "column": 3,
          "position": 514
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        if \"GroupIds\" in mesh.cell_data:\n            group_ids: nt.IN = mesh.cell_data[\"GroupIds\"]\n            group_names: npt.NDArray[np.str_]\n            if \"GroupNames\" in mesh.field_data:\n                group_names = mesh.field_data[\"GroupNames\"]\n            else:\n                group_names = np.full((len(np.unique(group_ids)),), \"\")\n            last_group_id: int = -1\n            for f, group_id in zip(mesh.irregular_faces, group_ids, strict=True):\n                if group_id != last_group_id:\n                    group_name: str = group_names[group_id]\n                    if group_name:\n                        fprint",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/io/pyvista/_obj.py",
        "start": 59,
        "end": 72,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 601
        },
        "endLoc": {
          "line": 72,
          "column": 7,
          "position": 766
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/io-obj/src/main.py",
        "start": 60,
        "end": 73,
        "startLoc": {
          "line": 60,
          "column": 3,
          "position": 607
        },
        "endLoc": {
          "line": 73,
          "column": 6,
          "position": 772
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n\n\ndef parse_f(values: list[str]) -> list[int]:\n    splits: list[list[str]] = [v.split(\"/\") for v in values]\n    v: list[int] = [int(s[0]) - 1 for s in splits]  # vertex indices\n    # TODO: load vertex texture coordinate indices & vertex normal indices\n    return v",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/io/pyvista/_obj.py",
        "start": 79,
        "end": 86,
        "startLoc": {
          "line": 79,
          "column": 2,
          "position": 853
        },
        "endLoc": {
          "line": 86,
          "column": 2,
          "position": 951
        }
      },
      "secondFile": {
        "name": "exp/2024/09/25/io-obj/src/main.py",
        "start": 80,
        "end": 87,
        "startLoc": {
          "line": 80,
          "column": 3,
          "position": 879
        },
        "endLoc": {
          "line": 87,
          "column": 2,
          "position": 977
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "(\n            age=data[\"PatientAge\"].value,\n            birth_date=data[\"PatientBirthDate\"].value,\n            date=data[\"AcquisitionDate\"].value,\n            id=data[\"PatientID\"].value,\n            name=str(data[\"PatientName\"].value),\n            sex=data[\"PatientSex\"].value,\n            time=data[\"AcquisitionTime\"].value,\n        )\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/io/dicom/_dicom.py",
        "start": 47,
        "end": 58,
        "startLoc": {
          "line": 47,
          "column": 16,
          "position": 382
        },
        "endLoc": {
          "line": 58,
          "column": 6,
          "position": 469
        }
      },
      "secondFile": {
        "name": "exp/2024/09/12/organize-ct/src/organize-CT.py",
        "start": 41,
        "end": 52,
        "startLoc": {
          "line": 41,
          "column": 12,
          "position": 229
        },
        "endLoc": {
          "line": 52,
          "column": 4,
          "position": 316
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "from mkit.typing.array import (\n    ArrayLike,\n    BLike,\n    BNLike,\n    F3Like,\n    F4Like,\n    F33Like,\n    F34Like,\n    F43Like,\n    F44Like,\n    FLike,\n    FMN3Like,\n    FMNLike,\n    FN3Like,\n    FNLike,\n    FNNLike,\n    I2Like,\n    I3Like,\n    I4Like,\n    ILike,\n    IN2Like,\n    IN3Like,\n    IN4Like,\n    INLike,\n)",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/typing/jax.py",
        "start": 5,
        "end": 29,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 32
        },
        "endLoc": {
          "line": 29,
          "column": 2,
          "position": 136
        }
      },
      "secondFile": {
        "name": "src/mkit/typing/torch/_export.py",
        "start": 3,
        "end": 27,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 18
        },
        "endLoc": {
          "line": 27,
          "column": 14,
          "position": 123
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "B = Bool[jax.Array, \"\"]\nBN = Bool[jax.Array, \"N\"]\n\nF = Float[jax.Array, \"\"]\nF3 = Float[jax.Array, \"3\"]\nF33 = Float[jax.Array, \"3 3\"]\nF34 = Float[jax.Array, \"3 4\"]\nF4 = Float[jax.Array, \"4\"]\nF43 = Float[jax.Array, \"4 3\"]\nF44 = Float[jax.Array, \"4 4\"]\nFMN = Float[jax.Array, \"M N\"]\nFMN3 = Float[jax.Array, \"M N 3\"]\nFN = Float[jax.Array, \"N\"]\nFN3 = Float[jax.Array, \"N 3\"]\nFNN = Float[jax.Array, \"N N\"]\n\nI = Integer[jax.Array, \"\"]  # noqa: E741\nI2 = Integer[jax.Array, \"2\"]\nI3 = Integer[jax.Array, \"3\"]\nI4 = Integer[jax.Array, \"4\"]\nIN = Integer[jax.Array, \"N\"]\nIN2 = Integer[jax.Array, \"N 2\"]\nIN3 = Integer[jax.Array, \"N 3\"]\nIN4 = Integer[jax.Array, \"N 4\"]",
      "tokens": 0,
      "firstFile": {
        "name": "src/mkit/typing/jax.py",
        "start": 31,
        "end": 54,
        "startLoc": {
          "line": 31,
          "column": 1,
          "position": 139
        },
        "endLoc": {
          "line": 54,
          "column": 2,
          "position": 449
        }
      },
      "secondFile": {
        "name": "src/mkit/typing/jax/_types.py",
        "start": 4,
        "end": 27,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 19
        },
        "endLoc": {
          "line": 27,
          "column": 2,
          "position": 329
        }
      }
    }
  ],
  "filename": "/node-deps/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}