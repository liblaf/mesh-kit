{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>*/</li> <li>*.md</li> <li>API Reference</li> </ul>"},{"location":"api/SUMMARY/","title":"SUMMARY","text":"<ul> <li>mkit<ul> <li>mkit.cli</li> <li>mkit.creation<ul> <li>mkit.creation.tet</li> </ul> </li> <li>mkit.ext<ul> <li>mkit.ext.ict_facekit</li> <li>mkit.ext.sculptor<ul> <li>mkit.ext.sculptor.template</li> </ul> </li> <li>mkit.ext.wrap</li> </ul> </li> <li>mkit.io<ul> <li>mkit.io.dicom</li> <li>mkit.io.open3d</li> <li>mkit.io.pytorch3d</li> <li>mkit.io.pyvista</li> <li>mkit.io.trimesh</li> </ul> </li> <li>mkit.logging</li> <li>mkit.math<ul> <li>mkit.math.jax</li> <li>mkit.math.numpy</li> <li>mkit.math.python</li> <li>mkit.math.sparse</li> </ul> </li> <li>mkit.ops<ul> <li>mkit.ops.attr</li> <li>mkit.ops.point</li> <li>mkit.ops.registration<ul> <li>mkit.ops.registration.global_</li> <li>mkit.ops.registration.non_rigid<ul> <li>mkit.ops.registration.non_rigid.amberg_pytorch3d</li> </ul> </li> <li>mkit.ops.registration.preprocess</li> <li>mkit.ops.registration.rigid</li> </ul> </li> <li>mkit.ops.sample</li> <li>mkit.ops.select</li> <li>mkit.ops.transfer</li> <li>mkit.ops.transform</li> </ul> </li> <li>mkit.physics<ul> <li>mkit.physics.cell<ul> <li>mkit.physics.cell.tetra</li> </ul> </li> <li>mkit.physics.energy<ul> <li>mkit.physics.energy.elastic</li> </ul> </li> <li>mkit.physics.model</li> </ul> </li> <li>mkit.plot</li> <li>mkit.typing<ul> <li>mkit.typing.array</li> <li>mkit.typing.jax</li> <li>mkit.typing.numpy</li> <li>mkit.typing.torch</li> </ul> </li> <li>mkit.utils<ul> <li>mkit.utils.func</li> <li>mkit.utils.iter</li> <li>mkit.utils.live</li> <li>mkit.utils.serialize</li> <li>mkit.utils.text</li> </ul> </li> </ul> </li> </ul>"},{"location":"api/mkit/","title":"mkit","text":""},{"location":"api/mkit/#mkit.__version__","title":"__version__  <code>module-attribute</code>","text":"<pre><code>__version__: str = version('mesh-kit')\n</code></pre>"},{"location":"api/mkit/cli/","title":"mkit.cli","text":""},{"location":"api/mkit/cli/#mkit.cli.BaseConfig","title":"BaseConfig","text":"<p>               Bases: <code>BaseSettings</code></p>"},{"location":"api/mkit/cli/#mkit.cli.BaseConfig.log_file","title":"log_file  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_file: Path | None = None\n</code></pre>"},{"location":"api/mkit/cli/#mkit.cli.BaseConfig.log_level","title":"log_level  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>log_level: int | str = 'INFO'\n</code></pre>"},{"location":"api/mkit/cli/#mkit.cli.BaseConfig.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = SettingsConfigDict(\n    cli_parse_args=True, yaml_file=\"params.yaml\"\n)\n</code></pre>"},{"location":"api/mkit/cli/#mkit.cli.BaseConfig.settings_customise_sources","title":"settings_customise_sources  <code>classmethod</code>","text":"<pre><code>settings_customise_sources(\n    settings_cls: type[BaseSettings],\n    init_settings: PydanticBaseSettingsSource,\n    env_settings: PydanticBaseSettingsSource,\n    dotenv_settings: PydanticBaseSettingsSource,\n    file_secret_settings: PydanticBaseSettingsSource,\n) -&gt; tuple[PydanticBaseSettingsSource, ...]\n</code></pre>"},{"location":"api/mkit/cli/#mkit.cli.auto_run","title":"auto_run","text":"<pre><code>auto_run(\n    **kwargs: Unpack[Kwargs],\n) -&gt; Callable[[Callable[[_C], _T]], Callable[[_C], _T]]\n</code></pre>"},{"location":"api/mkit/cli/#mkit.cli.run","title":"run","text":"<pre><code>run(fn: Callable[[_C], _T], **kwargs: Unpack[Kwargs]) -&gt; _T\n</code></pre>"},{"location":"api/mkit/creation/","title":"mkit.creation","text":""},{"location":"api/mkit/creation/tet/","title":"mkit.creation.tet","text":""},{"location":"api/mkit/creation/tet/#mkit.creation.tet.box","title":"box","text":"<pre><code>box(\n    bounds: Sequence[float] = (\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n    )\n) -&gt; UnstructuredGrid\n</code></pre>"},{"location":"api/mkit/creation/tet/#mkit.creation.tet.cylinder","title":"cylinder","text":"<pre><code>cylinder() -&gt; UnstructuredGrid\n</code></pre>"},{"location":"api/mkit/creation/tet/#mkit.creation.tet.tetrahedron","title":"tetrahedron","text":"<pre><code>tetrahedron() -&gt; UnstructuredGrid\n</code></pre>"},{"location":"api/mkit/ext/","title":"mkit.ext","text":""},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit","title":"ICTFaceKit","text":"<p>               Bases: <code>Mapping[str, PolyData]</code></p>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.face","title":"face  <code>property</code>","text":"<pre><code>face: PolyData\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.head","title":"head  <code>property</code>","text":"<pre><code>head: PolyData\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.mesh","title":"mesh  <code>instance-attribute</code>","text":"<pre><code>mesh: PolyData = read(filename, progress_bar=progress_bar)\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.narrow_face","title":"narrow_face  <code>property</code>","text":"<pre><code>narrow_face: PolyData\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(name: str) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.__init__","title":"__init__","text":"<pre><code>__init__(*, progress_bar: bool = True) -&gt; None\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.extract","title":"extract","text":"<pre><code>extract(*name: str, progress_bar: bool = True) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.polygon_indices","title":"polygon_indices  <code>staticmethod</code>","text":"<pre><code>polygon_indices(*name: str) -&gt; NDArray[integer]\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.ICTFaceKit.vertex_indices","title":"vertex_indices  <code>staticmethod</code>","text":"<pre><code>vertex_indices(*name: str) -&gt; NDArray[integer]\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.tetgen","title":"tetgen","text":"<pre><code>tetgen(surface: AnySurfaceMesh) -&gt; UnstructuredGrid\n</code></pre>"},{"location":"api/mkit/ext/#mkit.ext.tetwild","title":"tetwild","text":"<pre><code>tetwild(surface: AnySurfaceMesh) -&gt; UnstructuredGrid\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/","title":"mkit.ext.ict_facekit","text":""},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit","title":"ICTFaceKit","text":"<p>               Bases: <code>Mapping[str, PolyData]</code></p>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.face","title":"face  <code>property</code>","text":"<pre><code>face: PolyData\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.head","title":"head  <code>property</code>","text":"<pre><code>head: PolyData\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.mesh","title":"mesh  <code>instance-attribute</code>","text":"<pre><code>mesh: PolyData = read(filename, progress_bar=progress_bar)\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.narrow_face","title":"narrow_face  <code>property</code>","text":"<pre><code>narrow_face: PolyData\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(name: str) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.__init__","title":"__init__","text":"<pre><code>__init__(*, progress_bar: bool = True) -&gt; None\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.extract","title":"extract","text":"<pre><code>extract(*name: str, progress_bar: bool = True) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.polygon_indices","title":"polygon_indices  <code>staticmethod</code>","text":"<pre><code>polygon_indices(*name: str) -&gt; NDArray[integer]\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.ICTFaceKit.vertex_indices","title":"vertex_indices  <code>staticmethod</code>","text":"<pre><code>vertex_indices(*name: str) -&gt; NDArray[integer]\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.polygon_indices","title":"polygon_indices","text":"<pre><code>polygon_indices(*name: str) -&gt; IN\n</code></pre>"},{"location":"api/mkit/ext/ict_facekit/#mkit.ext.ict_facekit.vertex_indices","title":"vertex_indices","text":"<pre><code>vertex_indices(*name: str) -&gt; IN\n</code></pre>"},{"location":"api/mkit/ext/sculptor/","title":"mkit.ext.sculptor","text":""},{"location":"api/mkit/ext/sculptor/#mkit.ext.sculptor.get_template_face","title":"get_template_face","text":"<pre><code>get_template_face() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/sculptor/#mkit.ext.sculptor.get_template_mandible","title":"get_template_mandible","text":"<pre><code>get_template_mandible() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/sculptor/#mkit.ext.sculptor.get_template_maxilla","title":"get_template_maxilla","text":"<pre><code>get_template_maxilla() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/sculptor/#mkit.ext.sculptor.get_template_skull","title":"get_template_skull","text":"<pre><code>get_template_skull() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/sculptor/template/","title":"mkit.ext.sculptor.template","text":""},{"location":"api/mkit/ext/sculptor/template/#mkit.ext.sculptor.template.REGISTRY","title":"REGISTRY  <code>module-attribute</code>","text":"<pre><code>REGISTRY: Pooch = create(\n    os_cache(\"mesh-kit\"),\n    base_url=\"https://github.com/liblaf/sculptor/releases/download/template/\",\n    registry={\n        \"face.ply\": \"sha256:480a2d7fddcd68361347d9e9d2e199c894015f6092f7d9449afdbba69587870a\",\n        \"skull.ply\": \"sha256:5efc3f1a70cebdd8e2a6aed4837a833294839239e7363e2b5937ace10423e339\",\n    },\n)\n</code></pre>"},{"location":"api/mkit/ext/sculptor/template/#mkit.ext.sculptor.template.get_template_face","title":"get_template_face","text":"<pre><code>get_template_face() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/sculptor/template/#mkit.ext.sculptor.template.get_template_mandible","title":"get_template_mandible","text":"<pre><code>get_template_mandible() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/sculptor/template/#mkit.ext.sculptor.template.get_template_maxilla","title":"get_template_maxilla","text":"<pre><code>get_template_maxilla() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/sculptor/template/#mkit.ext.sculptor.template.get_template_skull","title":"get_template_skull","text":"<pre><code>get_template_skull() -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ext/wrap/","title":"mkit.ext.wrap","text":""},{"location":"api/mkit/ext/wrap/#mkit.ext.wrap.fast_wrapping","title":"fast_wrapping","text":"<pre><code>fast_wrapping(source: Any, target: Any) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/","title":"mkit.io","text":""},{"location":"api/mkit/io/#mkit.io.Acquisition","title":"Acquisition","text":""},{"location":"api/mkit/io/#mkit.io.Acquisition.ct","title":"ct  <code>property</code>","text":"<pre><code>ct: ImageData\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Acquisition.date","title":"date  <code>property</code>","text":"<pre><code>date: date\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Acquisition.dirfile","title":"dirfile  <code>property</code>","text":"<pre><code>dirfile: FileDataset\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Acquisition.dirfile_fpath","title":"dirfile_fpath  <code>property</code>","text":"<pre><code>dirfile_fpath: Path\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Acquisition.dpath","title":"dpath  <code>instance-attribute</code>","text":"<pre><code>dpath: Path = Path(dpath)\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Acquisition.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Acquisition.meta","title":"meta  <code>cached</code> <code>property</code>","text":"<pre><code>meta: AcquisitionMeta\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Acquisition.__init__","title":"__init__","text":"<pre><code>__init__(dpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.DICOMDataset","title":"DICOMDataset","text":"<p>               Bases: <code>Mapping[str, Patient]</code></p>"},{"location":"api/mkit/io/#mkit.io.DICOMDataset.dpath","title":"dpath  <code>instance-attribute</code>","text":"<pre><code>dpath: Path = Path(dpath)\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.DICOMDataset.meta","title":"meta  <code>cached</code> <code>property</code>","text":"<pre><code>meta: DatasetMeta\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.DICOMDataset.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(patient_id: str) -&gt; Patient\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.DICOMDataset.__init__","title":"__init__","text":"<pre><code>__init__(dpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.DICOMDataset.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.DICOMDataset.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Patient","title":"Patient","text":"<p>               Bases: <code>Sequence[Acquisition]</code></p>"},{"location":"api/mkit/io/#mkit.io.Patient.dpath","title":"dpath  <code>instance-attribute</code>","text":"<pre><code>dpath: Path = Path(dpath)\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Patient.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Patient.meta","title":"meta  <code>cached</code> <code>property</code>","text":"<pre><code>meta: PatientMeta\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Patient.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(idx: int) -&gt; Acquisition\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Patient.__init__","title":"__init__","text":"<pre><code>__init__(dpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.Patient.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.UnsupportedConversionError","title":"UnsupportedConversionError","text":"<p>               Bases: <code>ValueError</code></p>"},{"location":"api/mkit/io/#mkit.io.UnsupportedConversionError.__init__","title":"__init__","text":"<pre><code>__init__(from_: Any, to: type) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/#mkit.io.save","title":"save","text":"<pre><code>save(\n    mesh: Any, fpath: StrPath, *, ext: str | None = None\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/dicom/","title":"mkit.io.dicom","text":""},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition","title":"Acquisition","text":""},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.ct","title":"ct  <code>property</code>","text":"<pre><code>ct: ImageData\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.date","title":"date  <code>property</code>","text":"<pre><code>date: date\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.dirfile","title":"dirfile  <code>property</code>","text":"<pre><code>dirfile: FileDataset\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.dirfile_fpath","title":"dirfile_fpath  <code>property</code>","text":"<pre><code>dirfile_fpath: Path\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.dpath","title":"dpath  <code>instance-attribute</code>","text":"<pre><code>dpath: Path = Path(dpath)\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.meta","title":"meta  <code>cached</code> <code>property</code>","text":"<pre><code>meta: AcquisitionMeta\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Acquisition.__init__","title":"__init__","text":"<pre><code>__init__(dpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.DICOMDataset","title":"DICOMDataset","text":"<p>               Bases: <code>Mapping[str, Patient]</code></p>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.DICOMDataset.dpath","title":"dpath  <code>instance-attribute</code>","text":"<pre><code>dpath: Path = Path(dpath)\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.DICOMDataset.meta","title":"meta  <code>cached</code> <code>property</code>","text":"<pre><code>meta: DatasetMeta\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.DICOMDataset.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(patient_id: str) -&gt; Patient\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.DICOMDataset.__init__","title":"__init__","text":"<pre><code>__init__(dpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.DICOMDataset.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.DICOMDataset.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Patient","title":"Patient","text":"<p>               Bases: <code>Sequence[Acquisition]</code></p>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Patient.dpath","title":"dpath  <code>instance-attribute</code>","text":"<pre><code>dpath: Path = Path(dpath)\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Patient.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Patient.meta","title":"meta  <code>cached</code> <code>property</code>","text":"<pre><code>meta: PatientMeta\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Patient.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(idx: int) -&gt; Acquisition\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Patient.__init__","title":"__init__","text":"<pre><code>__init__(dpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/dicom/#mkit.io.dicom.Patient.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre>"},{"location":"api/mkit/io/open3d/","title":"mkit.io.open3d","text":""},{"location":"api/mkit/io/open3d/#mkit.io.open3d.as_point_cloud","title":"as_point_cloud","text":"<pre><code>as_point_cloud(mesh: Any) -&gt; PointCloud\n</code></pre>"},{"location":"api/mkit/io/pytorch3d/","title":"mkit.io.pytorch3d","text":""},{"location":"api/mkit/io/pytorch3d/#mkit.io.pytorch3d.as_meshes","title":"as_meshes","text":"<pre><code>as_meshes(mesh: Any) -&gt; Meshes\n</code></pre>"},{"location":"api/mkit/io/pyvista/","title":"mkit.io.pyvista","text":""},{"location":"api/mkit/io/pyvista/#mkit.io.pyvista.as_poly_data","title":"as_poly_data","text":"<pre><code>as_poly_data(mesh: AnySurfaceMesh) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/io/pyvista/#mkit.io.pyvista.as_unstructured_grid","title":"as_unstructured_grid","text":"<pre><code>as_unstructured_grid(mesh: Any) -&gt; UnstructuredGrid\n</code></pre>"},{"location":"api/mkit/io/pyvista/#mkit.io.pyvista.is_point_cloud","title":"is_point_cloud","text":"<pre><code>is_point_cloud(mesh: PolyData) -&gt; bool\n</code></pre> <p>Determine if a given PyVista PolyData object represents a point cloud.</p> <p>A point cloud is characterized by having the number of points plus the number of lines equal to the number of cells.</p> <p>Parameters:</p> <ul> <li> <code>mesh</code>               (<code>PolyData</code>)           \u2013            <p>The PyVista PolyData object to check.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>True if the PolyData object is a point cloud, False otherwise.</p> </li> </ul> Reference <ol> <li>https://github.com/pyvista/pyvista/blob/556d86725f27c43e30445c877961910d0fff0893/pyvista/core/filters/poly_data.py#L1730-L1734</li> </ol>"},{"location":"api/mkit/io/pyvista/#mkit.io.pyvista.load_obj","title":"load_obj","text":"<pre><code>load_obj(fpath: StrPath) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/io/pyvista/#mkit.io.pyvista.load_poly_data","title":"load_poly_data","text":"<pre><code>load_poly_data(fpath: StrPath) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/io/pyvista/#mkit.io.pyvista.make_tet_mesh","title":"make_tet_mesh","text":"<pre><code>make_tet_mesh(\n    points: FN3Like, tetra: IN4Like\n) -&gt; UnstructuredGrid\n</code></pre>"},{"location":"api/mkit/io/pyvista/#mkit.io.pyvista.save_obj","title":"save_obj","text":"<pre><code>save_obj(mesh: PolyData, fpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/io/trimesh/","title":"mkit.io.trimesh","text":""},{"location":"api/mkit/io/trimesh/#mkit.io.trimesh.as_trimesh","title":"as_trimesh","text":"<pre><code>as_trimesh(mesh: AnySurfaceMesh) -&gt; Trimesh\n</code></pre>"},{"location":"api/mkit/logging/","title":"mkit.logging","text":""},{"location":"api/mkit/logging/#mkit.logging.DEFAULT_FILTER","title":"DEFAULT_FILTER  <code>module-attribute</code>","text":"<pre><code>DEFAULT_FILTER: dict[str | None, str | int | bool] = {\n    \"jax._src\": INFO,\n    \"numba.core\": INFO,\n}\n</code></pre>"},{"location":"api/mkit/logging/#mkit.logging.init","title":"init","text":"<pre><code>init(\n    level: str | int = logging.NOTSET,\n    file: StrPath | None = None,\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/logging/#mkit.logging.log_time","title":"log_time","text":"<pre><code>log_time(fn: Callable[_P, _T]) -&gt; Callable[_P, _T]\n</code></pre>"},{"location":"api/mkit/math/","title":"mkit.math","text":""},{"location":"api/mkit/math/#mkit.math.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(x: ArrayLike) -&gt; NDArray[...]\n</code></pre>"},{"location":"api/mkit/math/#mkit.math.as_scalar","title":"as_scalar","text":"<pre><code>as_scalar(val: Any) -&gt; float\n</code></pre>"},{"location":"api/mkit/math/jax/","title":"mkit.math.jax","text":""},{"location":"api/mkit/math/jax/#mkit.math.jax.F2","title":"F2","text":"<pre><code>F2(x: Float[ArrayLike, ...]) -&gt; F\n</code></pre>"},{"location":"api/mkit/math/jax/#mkit.math.jax.frobenius_norm_square","title":"frobenius_norm_square","text":"<pre><code>frobenius_norm_square(x: Float[ArrayLike, ...]) -&gt; F\n</code></pre>"},{"location":"api/mkit/math/jax/#mkit.math.jax.invariants","title":"invariants","text":"<pre><code>invariants(A: FNNLike) -&gt; tuple[F, F, F]\n</code></pre>"},{"location":"api/mkit/math/jax/#mkit.math.jax.polar","title":"polar","text":"<pre><code>polar(\n    a: FMNLike,\n    side: Literal[\"left\", \"right\"] = \"left\",\n    *args,\n    method: Literal[\"svd\", \"qdwh\"] = \"svd\",\n    **kwargs\n) -&gt; tuple[FMN, FNN]\n</code></pre> <p>Computes the polar decomposition.</p>"},{"location":"api/mkit/math/numpy/","title":"mkit.math.numpy","text":""},{"location":"api/mkit/math/numpy/#mkit.math.numpy.as_bool","title":"as_bool","text":"<pre><code>as_bool(x: ArrayLike) -&gt; NDArray[bool]\n</code></pre>"},{"location":"api/mkit/math/numpy/#mkit.math.numpy.as_numpy","title":"as_numpy","text":"<pre><code>as_numpy(x: ArrayLike) -&gt; NDArray[...]\n</code></pre>"},{"location":"api/mkit/math/numpy/#mkit.math.numpy.cast","title":"cast","text":"<pre><code>cast(x: ArrayLike, dtype: DTypeLike) -&gt; NDArray[...]\n</code></pre>"},{"location":"api/mkit/math/python/","title":"mkit.math.python","text":""},{"location":"api/mkit/math/python/#mkit.math.python.as_scalar","title":"as_scalar","text":"<pre><code>as_scalar(val: Any) -&gt; float\n</code></pre>"},{"location":"api/mkit/math/sparse/","title":"mkit.math.sparse","text":""},{"location":"api/mkit/math/sparse/#mkit.math.sparse.mask","title":"mask","text":"<pre><code>mask(array: Any, coord_masks: Sequence[BNLike]) -&gt; COO\n</code></pre>"},{"location":"api/mkit/ops/","title":"mkit.ops","text":""},{"location":"api/mkit/ops/attr/","title":"mkit.ops.attr","text":""},{"location":"api/mkit/ops/attr/#mkit.ops.attr.cell_data_to_point_data","title":"cell_data_to_point_data","text":"<pre><code>cell_data_to_point_data(\n    mesh: Any, cell_data: AttributesLike | None = None\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/point/","title":"mkit.ops.point","text":""},{"location":"api/mkit/ops/point/#mkit.ops.point.point_to_index","title":"point_to_index","text":"<pre><code>point_to_index(\n    points: FN3Like, query: FN3Like, *, tol: float = 1e-06\n) -&gt; IN3\n</code></pre>"},{"location":"api/mkit/ops/registration/","title":"mkit.ops.registration","text":""},{"location":"api/mkit/ops/registration/#mkit.ops.registration.GlobalRegistrationResult","title":"GlobalRegistrationResult  <code>dataclass</code>","text":""},{"location":"api/mkit/ops/registration/#mkit.ops.registration.GlobalRegistrationResult.correspondence_set","title":"correspondence_set  <code>instance-attribute</code>","text":"<pre><code>correspondence_set: IN2\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.GlobalRegistrationResult.fitness","title":"fitness  <code>instance-attribute</code>","text":"<pre><code>fitness: float\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.GlobalRegistrationResult.inlier_rmse","title":"inlier_rmse  <code>instance-attribute</code>","text":"<pre><code>inlier_rmse: float\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.GlobalRegistrationResult.transform","title":"transform  <code>instance-attribute</code>","text":"<pre><code>transform: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.GlobalRegistrationResult.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    correspondence_set: IN2,\n    fitness: float,\n    inlier_rmse: float,\n    transform: F44\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.NonRigidRegistrationResult","title":"NonRigidRegistrationResult  <code>dataclass</code>","text":""},{"location":"api/mkit/ops/registration/#mkit.ops.registration.NonRigidRegistrationResult.points","title":"points  <code>instance-attribute</code>","text":"<pre><code>points: FN3\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.NonRigidRegistrationResult.__init__","title":"__init__","text":"<pre><code>__init__(*, points: FN3) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.RigidRegistrationMethod","title":"RigidRegistrationMethod","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.RigidRegistrationMethod.__call__","title":"__call__  <code>abstractmethod</code>","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    source_weight: FNLike | None = None,\n    target_weight: FNLike | None = None,\n) -&gt; RigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.RigidRegistrationResult","title":"RigidRegistrationResult  <code>dataclass</code>","text":""},{"location":"api/mkit/ops/registration/#mkit.ops.registration.RigidRegistrationResult.cost","title":"cost  <code>instance-attribute</code>","text":"<pre><code>cost: float\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.RigidRegistrationResult.transform","title":"transform  <code>instance-attribute</code>","text":"<pre><code>transform: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.RigidRegistrationResult.__init__","title":"__init__","text":"<pre><code>__init__(*, transform: F44, cost: float) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP","title":"TrimeshICP  <code>dataclass</code>","text":"<p>               Bases: <code>RigidRegistrationMethod</code></p>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP.max_iterations","title":"max_iterations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_iterations: int = 100\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP.reflection","title":"reflection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reflection: bool = False\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP.scale","title":"scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scale: bool = True\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP.threshold","title":"threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>threshold: float = 1e-06\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP.translation","title":"translation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>translation: bool = True\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    source_weight: FNLike | None = None,\n    target_weight: FNLike | None = None,\n) -&gt; RigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.TrimeshICP.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    max_iterations: int = 100,\n    reflection: bool = False,\n    scale: bool = True,\n    threshold: float = 1e-06,\n    translation: bool = True\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.global_registration","title":"global_registration","text":"<pre><code>global_registration(\n    source: Any,\n    target: Any,\n    *,\n    init: F44Like | None = None,\n    inverse: bool = False,\n    method: Literal[\"open3d\"] = \"open3d\",\n    normalize: bool = True,\n    **kwargs\n) -&gt; GlobalRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.non_rigid_registration","title":"non_rigid_registration","text":"<pre><code>non_rigid_registration(\n    method: NonRigidRegistrationMethod,\n) -&gt; NonRigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/#mkit.ops.registration.rigid_registration","title":"rigid_registration","text":"<pre><code>rigid_registration(\n    source: Any,\n    target: Any,\n    *,\n    estimate_init: bool = True,\n    init: F44Like | None = None,\n    inverse: bool = False,\n    method: RigidRegistrationMethod | None = None,\n    source_weight: FN3Like | None = None,\n    target_weight: FN3Like | None = None\n) -&gt; RigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/global_/","title":"mkit.ops.registration.global_","text":""},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.GlobalRegistrationResult","title":"GlobalRegistrationResult  <code>dataclass</code>","text":""},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.GlobalRegistrationResult.correspondence_set","title":"correspondence_set  <code>instance-attribute</code>","text":"<pre><code>correspondence_set: IN2\n</code></pre>"},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.GlobalRegistrationResult.fitness","title":"fitness  <code>instance-attribute</code>","text":"<pre><code>fitness: float\n</code></pre>"},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.GlobalRegistrationResult.inlier_rmse","title":"inlier_rmse  <code>instance-attribute</code>","text":"<pre><code>inlier_rmse: float\n</code></pre>"},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.GlobalRegistrationResult.transform","title":"transform  <code>instance-attribute</code>","text":"<pre><code>transform: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.GlobalRegistrationResult.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    correspondence_set: IN2,\n    fitness: float,\n    inlier_rmse: float,\n    transform: F44\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.fgr_based_on_feature_matching","title":"fgr_based_on_feature_matching","text":"<pre><code>fgr_based_on_feature_matching(\n    source: Any,\n    target: Any,\n    *,\n    normal_radius: float = 0.04,\n    normal_max_nn: int = 30,\n    feature_radius: float = 0.1,\n    feature_max_nn: int = 100,\n    distance_threshold: float = 0.01\n) -&gt; GlobalRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/global_/#mkit.ops.registration.global_.global_registration","title":"global_registration","text":"<pre><code>global_registration(\n    source: Any,\n    target: Any,\n    *,\n    init: F44Like | None = None,\n    inverse: bool = False,\n    method: Literal[\"open3d\"] = \"open3d\",\n    normalize: bool = True,\n    **kwargs\n) -&gt; GlobalRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/","title":"mkit.ops.registration.non_rigid","text":""},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg","title":"Amberg","text":"<p>               Bases: <code>NonRigidRegistrationMethod</code></p>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.denorm_transformation","title":"denorm_transformation  <code>cached</code> <code>property</code>","text":"<pre><code>denorm_transformation: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.live","title":"live  <code>instance-attribute</code>","text":"<pre><code>live: Live = live\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.local_affine","title":"local_affine  <code>cached</code> <code>property</code>","text":"<pre><code>local_affine: LocalAffine\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.n_points","title":"n_points  <code>cached</code> <code>property</code>","text":"<pre><code>n_points: int\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.normalization_transformation","title":"normalization_transformation  <code>cached</code> <code>property</code>","text":"<pre><code>normalization_transformation: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.optimizer","title":"optimizer  <code>cached</code> <code>property</code>","text":"<pre><code>optimizer: Optimizer\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.params","title":"params  <code>instance-attribute</code>","text":"<pre><code>params: Params = Params(\n    n_points=n_points,\n    normalization_transformation=normalization_transformation,\n    **kwargs\n)\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.result","title":"result  <code>property</code>","text":"<pre><code>result: Meshes\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.result_denormalized","title":"result_denormalized  <code>property</code>","text":"<pre><code>result_denormalized: PolyData\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.source","title":"source  <code>cached</code> <code>property</code>","text":"<pre><code>source: Meshes\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.target","title":"target  <code>cached</code> <code>property</code>","text":"<pre><code>target: Meshes\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.__init__","title":"__init__","text":"<pre><code>__init__(\n    source: Any,\n    target: Any,\n    *,\n    live: Live | None = None,\n    **kwargs: Unpack[ParamsDict]\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.Amberg.run","title":"run","text":"<pre><code>run() -&gt; NonRigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.NonRigidRegistrationMethod","title":"NonRigidRegistrationMethod","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.NonRigidRegistrationMethod.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run() -&gt; NonRigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.NonRigidRegistrationResult","title":"NonRigidRegistrationResult  <code>dataclass</code>","text":""},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.NonRigidRegistrationResult.points","title":"points  <code>instance-attribute</code>","text":"<pre><code>points: FN3\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.NonRigidRegistrationResult.__init__","title":"__init__","text":"<pre><code>__init__(*, points: FN3) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/#mkit.ops.registration.non_rigid.non_rigid_registration","title":"non_rigid_registration","text":"<pre><code>non_rigid_registration(\n    method: NonRigidRegistrationMethod,\n) -&gt; NonRigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/","title":"mkit.ops.registration.non_rigid.amberg_pytorch3d","text":""},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg","title":"Amberg","text":"<p>               Bases: <code>NonRigidRegistrationMethod</code></p>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.denorm_transformation","title":"denorm_transformation  <code>cached</code> <code>property</code>","text":"<pre><code>denorm_transformation: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.live","title":"live  <code>instance-attribute</code>","text":"<pre><code>live: Live = live\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.local_affine","title":"local_affine  <code>cached</code> <code>property</code>","text":"<pre><code>local_affine: LocalAffine\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.n_points","title":"n_points  <code>cached</code> <code>property</code>","text":"<pre><code>n_points: int\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.normalization_transformation","title":"normalization_transformation  <code>cached</code> <code>property</code>","text":"<pre><code>normalization_transformation: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.optimizer","title":"optimizer  <code>cached</code> <code>property</code>","text":"<pre><code>optimizer: Optimizer\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.params","title":"params  <code>instance-attribute</code>","text":"<pre><code>params: Params = Params(\n    n_points=n_points,\n    normalization_transformation=normalization_transformation,\n    **kwargs\n)\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.result","title":"result  <code>property</code>","text":"<pre><code>result: Meshes\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.result_denormalized","title":"result_denormalized  <code>property</code>","text":"<pre><code>result_denormalized: PolyData\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.source","title":"source  <code>cached</code> <code>property</code>","text":"<pre><code>source: Meshes\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.target","title":"target  <code>cached</code> <code>property</code>","text":"<pre><code>target: Meshes\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.__init__","title":"__init__","text":"<pre><code>__init__(\n    source: Any,\n    target: Any,\n    *,\n    live: Live | None = None,\n    **kwargs: Unpack[ParamsDict]\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.Amberg.run","title":"run","text":"<pre><code>run() -&gt; NonRigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.ParamsDict","title":"ParamsDict","text":"<p>               Bases: <code>TypedDict</code></p>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.ParamsDict.lr","title":"lr  <code>instance-attribute</code>","text":"<pre><code>lr: float\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.ParamsDict.point_data","title":"point_data  <code>instance-attribute</code>","text":"<pre><code>point_data: PointDataDict\n</code></pre>"},{"location":"api/mkit/ops/registration/non_rigid/amberg_pytorch3d/#mkit.ops.registration.non_rigid.amberg_pytorch3d.ParamsDict.steps","title":"steps  <code>instance-attribute</code>","text":"<pre><code>steps: Iterable[ICPParamsDict]\n</code></pre>"},{"location":"api/mkit/ops/registration/preprocess/","title":"mkit.ops.registration.preprocess","text":""},{"location":"api/mkit/ops/registration/preprocess/#mkit.ops.registration.preprocess.estimate_transform","title":"estimate_transform","text":"<pre><code>estimate_transform(\n    source: Any, target: Any, init: F44Like | None = None\n) -&gt; F44\n</code></pre>"},{"location":"api/mkit/ops/registration/preprocess/#mkit.ops.registration.preprocess.mask_points","title":"mask_points","text":"<pre><code>mask_points(\n    mesh: Any, mask: BNLike | None = None\n) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ops/registration/preprocess/#mkit.ops.registration.preprocess.sample_points","title":"sample_points","text":"<pre><code>sample_points(\n    mesh: Any, density: float = 10000.0\n) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ops/registration/preprocess/#mkit.ops.registration.preprocess.simplify_mesh","title":"simplify_mesh","text":"<pre><code>simplify_mesh(\n    mesh: Any,\n    *,\n    density: float = 10000.0,\n    agg: int = 7,\n    verbose: bool = True\n) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/","title":"mkit.ops.registration.rigid","text":""},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.RigidRegistrationMethod","title":"RigidRegistrationMethod","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.RigidRegistrationMethod.__call__","title":"__call__  <code>abstractmethod</code>","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    source_weight: FNLike | None = None,\n    target_weight: FNLike | None = None,\n) -&gt; RigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.RigidRegistrationResult","title":"RigidRegistrationResult  <code>dataclass</code>","text":""},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.RigidRegistrationResult.cost","title":"cost  <code>instance-attribute</code>","text":"<pre><code>cost: float\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.RigidRegistrationResult.transform","title":"transform  <code>instance-attribute</code>","text":"<pre><code>transform: F44\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.RigidRegistrationResult.__init__","title":"__init__","text":"<pre><code>__init__(*, transform: F44, cost: float) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP","title":"TrimeshICP  <code>dataclass</code>","text":"<p>               Bases: <code>RigidRegistrationMethod</code></p>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP.max_iterations","title":"max_iterations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>max_iterations: int = 100\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP.reflection","title":"reflection  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reflection: bool = False\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP.scale","title":"scale  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>scale: bool = True\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP.threshold","title":"threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>threshold: float = 1e-06\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP.translation","title":"translation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>translation: bool = True\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    source_weight: FNLike | None = None,\n    target_weight: FNLike | None = None,\n) -&gt; RigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.TrimeshICP.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    max_iterations: int = 100,\n    reflection: bool = False,\n    scale: bool = True,\n    threshold: float = 1e-06,\n    translation: bool = True\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/registration/rigid/#mkit.ops.registration.rigid.rigid_registration","title":"rigid_registration","text":"<pre><code>rigid_registration(\n    source: Any,\n    target: Any,\n    *,\n    estimate_init: bool = True,\n    init: F44Like | None = None,\n    inverse: bool = False,\n    method: RigidRegistrationMethod | None = None,\n    source_weight: FN3Like | None = None,\n    target_weight: FN3Like | None = None\n) -&gt; RigidRegistrationResult\n</code></pre>"},{"location":"api/mkit/ops/sample/","title":"mkit.ops.sample","text":""},{"location":"api/mkit/ops/sample/#mkit.ops.sample.sample_surface","title":"sample_surface","text":"<pre><code>sample_surface(\n    mesh: AnySurfaceMesh,\n    count: int,\n    point_data: (\n        Mapping[str, ArrayLike] | DataSetAttributes | None\n    ) = None,\n) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/ops/select/","title":"mkit.ops.select","text":""},{"location":"api/mkit/ops/select/#mkit.ops.select.names_to_ids","title":"names_to_ids","text":"<pre><code>names_to_ids(\n    names: Sequence[str],\n    *,\n    mesh: Any | None = None,\n    group_names: Sequence[str] | None = None\n) -&gt; list[int]\n</code></pre>"},{"location":"api/mkit/ops/select/#mkit.ops.select.select_by_group_ids","title":"select_by_group_ids","text":"<pre><code>select_by_group_ids(\n    ids: Sequence[int],\n    *,\n    mesh: Any | None = None,\n    group_ids: INLike | None = None\n) -&gt; BN\n</code></pre>"},{"location":"api/mkit/ops/select/#mkit.ops.select.select_by_group_names","title":"select_by_group_names","text":"<pre><code>select_by_group_names(\n    names: Sequence[str],\n    *,\n    mesh: Any | None = None,\n    group_ids: INLike | None = None,\n    group_names: Shaped[ArrayLike, \" N\"] | None = None\n) -&gt; BN\n</code></pre>"},{"location":"api/mkit/ops/transfer/","title":"mkit.ops.transfer","text":""},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CAuto","title":"C2CAuto  <code>dataclass</code>","text":"<p>               Bases: <code>C2CMethod</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CAuto.barycentric","title":"barycentric  <code>property</code>","text":"<pre><code>barycentric: C2CBarycentric\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CAuto.distance_threshold","title":"distance_threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distance_threshold: float = 0.1\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CAuto.fill_value","title":"fill_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fill_value: ArrayLike = nan\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CAuto.nearest","title":"nearest  <code>property</code>","text":"<pre><code>nearest: C2CNearest\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CAuto.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CAuto.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    distance_threshold: float = 0.1,\n    fill_value: ArrayLike = np.nan\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CBarycentric","title":"C2CBarycentric  <code>dataclass</code>","text":"<p>               Bases: <code>C2CMethod</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CBarycentric.distance_threshold","title":"distance_threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distance_threshold: float = 0.1\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CBarycentric.fill_value","title":"fill_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fill_value: ArrayLike = nan\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CBarycentric.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CBarycentric.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    distance_threshold: float = 0.1,\n    fill_value: ArrayLike = np.nan\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CMethod","title":"C2CMethod","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CMethod.__call__","title":"__call__  <code>abstractmethod</code>","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CNearest","title":"C2CNearest  <code>dataclass</code>","text":"<p>               Bases: <code>C2CMethod</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CNearest.distance_threshold","title":"distance_threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distance_threshold: float = 0.1\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CNearest.fill_value","title":"fill_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fill_value: ArrayLike = nan\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CNearest.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.C2CNearest.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    distance_threshold: float = 0.1,\n    fill_value: ArrayLike = np.nan\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PAuto","title":"P2PAuto  <code>dataclass</code>","text":"<p>               Bases: <code>P2PMethod</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PAuto.barycentric","title":"barycentric  <code>property</code>","text":"<pre><code>barycentric: P2PBarycentric\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PAuto.distance_threshold","title":"distance_threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distance_threshold: float = 0.1\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PAuto.fill_value","title":"fill_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fill_value: ArrayLike = nan\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PAuto.nearest","title":"nearest  <code>property</code>","text":"<pre><code>nearest: P2PNearest\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PAuto.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PAuto.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    distance_threshold: float = 0.1,\n    fill_value: ArrayLike = np.nan\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PBarycentric","title":"P2PBarycentric  <code>dataclass</code>","text":"<p>               Bases: <code>P2PMethod</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PBarycentric.distance_threshold","title":"distance_threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distance_threshold: float = 0.1\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PBarycentric.fill_value","title":"fill_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fill_value: ArrayLike = nan\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PBarycentric.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PBarycentric.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    distance_threshold: float = 0.1,\n    fill_value: ArrayLike = np.nan\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PMethod","title":"P2PMethod","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PMethod.__call__","title":"__call__  <code>abstractmethod</code>","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PNearest","title":"P2PNearest  <code>dataclass</code>","text":"<p>               Bases: <code>P2PMethod</code></p>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PNearest.distance_threshold","title":"distance_threshold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>distance_threshold: float = 0.1\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PNearest.fill_value","title":"fill_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fill_value: ArrayLike = nan\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PNearest.__call__","title":"__call__","text":"<pre><code>__call__(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.P2PNearest.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    distance_threshold: float = 0.1,\n    fill_value: ArrayLike = np.nan\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.surface_to_surface","title":"surface_to_surface","text":"<pre><code>surface_to_surface(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n    *,\n    method: C2CMethod | P2PMethod\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transfer/#mkit.ops.transfer.surface_to_volume","title":"surface_to_volume","text":"<pre><code>surface_to_volume(\n    source: Any,\n    target: Any,\n    data: AttributesLike | None = None,\n    *,\n    method: C2CMethod | P2PMethod\n) -&gt; dict[str, AttributeArray]\n</code></pre>"},{"location":"api/mkit/ops/transform/","title":"mkit.ops.transform","text":""},{"location":"api/mkit/ops/transform/#mkit.ops.transform.denorm_transformation","title":"denorm_transformation","text":"<pre><code>denorm_transformation(mesh: Any) -&gt; F44\n</code></pre> <p>Applies a denormalization transformation to the given mesh.</p> <p>This function converts the input mesh to a PyVista PolyData object, then computes a transformation matrix that scales and translates the mesh based on its length and center.</p> <p>Parameters:</p> <ul> <li> <code>mesh</code>               (<code>Any</code>)           \u2013            <p>The input mesh to be transformed. It can be of any type   that can be converted to a PyVista PolyData object.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>F44</code>           \u2013            <p>A 4x4 transformation matrix that scales and translates the mesh.</p> </li> </ul>"},{"location":"api/mkit/ops/transform/#mkit.ops.transform.norm_transformation","title":"norm_transformation","text":"<pre><code>norm_transformation(mesh: Any) -&gt; F44\n</code></pre> <p>Computes the normalization transformation matrix for a given mesh.</p> <p>This function calculates the inverse of the denormalization transformation matrix for the provided mesh and returns it as the normalization transformation matrix.</p> <p>Parameters:</p> <ul> <li> <code>mesh</code>               (<code>Any</code>)           \u2013            <p>The mesh object for which the normalization transformation   matrix is to be computed.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>F44</code>           \u2013            <p>The normalization transformation matrix.</p> </li> </ul>"},{"location":"api/mkit/ops/transform/#mkit.ops.transform.normalize","title":"normalize","text":"<pre><code>normalize(\n    mesh: Any,\n    *,\n    transform_all_input_vectors: bool = False,\n    inplace: bool = False\n) -&gt; PolyData\n</code></pre>"},{"location":"api/mkit/physics/","title":"mkit.physics","text":""},{"location":"api/mkit/physics/#mkit.physics.Model","title":"Model","text":""},{"location":"api/mkit/physics/#mkit.physics.Model.cell_data","title":"cell_data  <code>property</code>","text":"<pre><code>cell_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.cell_volume","title":"cell_volume  <code>property</code>","text":"<pre><code>cell_volume: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.energy_fn","title":"energy_fn  <code>instance-attribute</code>","text":"<pre><code>energy_fn: CellEnergy = CellEnergy(energy_fn)\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.energy_hess_coords","title":"energy_hess_coords  <code>cached</code> <code>property</code>","text":"<pre><code>energy_hess_coords: NDArray[integer]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.field_data","title":"field_data  <code>property</code>","text":"<pre><code>field_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.mesh","title":"mesh  <code>instance-attribute</code>","text":"<pre><code>mesh: UnstructuredGrid = as_unstructured_grid(mesh)\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.n_cells","title":"n_cells  <code>property</code>","text":"<pre><code>n_cells: int\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.n_points","title":"n_points  <code>property</code>","text":"<pre><code>n_points: int\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.point_data","title":"point_data  <code>property</code>","text":"<pre><code>point_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.point_data_vmap","title":"point_data_vmap  <code>property</code>","text":"<pre><code>point_data_vmap: dict[str, Array]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.points","title":"points  <code>property</code>","text":"<pre><code>points: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.points_vmap","title":"points_vmap  <code>property</code>","text":"<pre><code>points_vmap: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.tetra","title":"tetra  <code>property</code>","text":"<pre><code>tetra: NDArray[integer]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.__init__","title":"__init__","text":"<pre><code>__init__(\n    mesh: AnyTetMesh, energy_fn: CellEnergy | EnergyFn\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.energy","title":"energy","text":"<pre><code>energy(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.energy_density","title":"energy_density","text":"<pre><code>energy_density(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.energy_hess","title":"energy_hess","text":"<pre><code>energy_hess(disp: ArrayLike) -&gt; COO\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.energy_jac","title":"energy_jac","text":"<pre><code>energy_jac(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Model.make_disp_vmap","title":"make_disp_vmap","text":"<pre><code>make_disp_vmap(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem","title":"Problem","text":""},{"location":"api/mkit/physics/#mkit.physics.Problem.free_mask","title":"free_mask  <code>property</code>","text":"<pre><code>free_mask: NDArray[bool]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Model = Model(mesh, energy_fn)\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.n_free","title":"n_free  <code>property</code>","text":"<pre><code>n_free: int\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.n_pin","title":"n_pin  <code>property</code>","text":"<pre><code>n_pin: int\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.n_points","title":"n_points  <code>property</code>","text":"<pre><code>n_points: int\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.pin_disp","title":"pin_disp  <code>instance-attribute</code>","text":"<pre><code>pin_disp: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.pin_mask","title":"pin_mask  <code>instance-attribute</code>","text":"<pre><code>pin_mask: NDArray[bool]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.point_data","title":"point_data  <code>property</code>","text":"<pre><code>point_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.__init__","title":"__init__","text":"<pre><code>__init__(\n    mesh: AnyTetMesh,\n    energy_fn: CellEnergy | EnergyFn,\n    *,\n    pin_disp: ArrayLike | None = None,\n    pin_mask: ArrayLike | None = None\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.fun","title":"fun","text":"<pre><code>fun(x: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.hess","title":"hess","text":"<pre><code>hess(x: ArrayLike) -&gt; coo_matrix\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.jac","title":"jac","text":"<pre><code>jac(x: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.make_disp","title":"make_disp","text":"<pre><code>make_disp(x: ArrayLike) -&gt; NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/#mkit.physics.Problem.solve","title":"solve","text":"<pre><code>solve() -&gt; OptimizeResult\n</code></pre>"},{"location":"api/mkit/physics/cell/","title":"mkit.physics.cell","text":""},{"location":"api/mkit/physics/cell/tetra/","title":"mkit.physics.cell.tetra","text":""},{"location":"api/mkit/physics/cell/tetra/#mkit.physics.cell.tetra.cauchy_strain","title":"cauchy_strain","text":"<pre><code>cauchy_strain(F: F33Like) -&gt; F33\n</code></pre> <p>Cauchy strain tensor (right Cauchy-Green deformation tensor).</p> Reference <ol> <li>https://en.wikipedia.org/wiki/Finite_strain_theory#Cauchy_strain_tensor_(right_Cauchy%E2%80%93Green_deformation_tensor)</li> </ol>"},{"location":"api/mkit/physics/cell/tetra/#mkit.physics.cell.tetra.deformation_gradient","title":"deformation_gradient","text":"<pre><code>deformation_gradient(disp: F43Like, points: F43Like) -&gt; F33\n</code></pre>"},{"location":"api/mkit/physics/cell/tetra/#mkit.physics.cell.tetra.grad_op","title":"grad_op","text":"<pre><code>grad_op(points: F43Like) -&gt; F34\n</code></pre>"},{"location":"api/mkit/physics/cell/tetra/#mkit.physics.cell.tetra.lagrangian_strain","title":"lagrangian_strain","text":"<pre><code>lagrangian_strain(disp: F43Like, points: F43Like) -&gt; F33\n</code></pre> <p>Lagrangian finite strain tensor.</p> Reference <ol> <li>https://en.wikipedia.org/wiki/Finite_strain_theory#Finite_strain_tensors</li> </ol>"},{"location":"api/mkit/physics/cell/tetra/#mkit.physics.cell.tetra.volume","title":"volume","text":"<pre><code>volume(points: F43Like) -&gt; F\n</code></pre>"},{"location":"api/mkit/physics/energy/","title":"mkit.physics.energy","text":""},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy","title":"CellEnergy","text":"<p>               Bases: <code>EnergyFnOptional</code></p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.fn","title":"fn  <code>instance-attribute</code>","text":"<pre><code>fn: EnergyFn\n</code></pre>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.hess","title":"hess  <code>cached</code> <code>property</code>","text":"<pre><code>hess: EnergyFnOptional\n</code></pre> <p>(4, 3) -&gt; (4, 3, 4, 3).</p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.hess_vmap","title":"hess_vmap  <code>cached</code> <code>property</code>","text":"<pre><code>hess_vmap: EnergyFnOptional\n</code></pre> <p>(C, 4, 3) -&gt; (C, 4, 3, 4, 3).</p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.jac","title":"jac  <code>cached</code> <code>property</code>","text":"<pre><code>jac: EnergyFnOptional\n</code></pre> <p>(4, 3) -&gt; (4, 3).</p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.jac_vmap","title":"jac_vmap  <code>cached</code> <code>property</code>","text":"<pre><code>jac_vmap: EnergyFnOptional\n</code></pre> <p>(C, 4, 3) -&gt; (C, 4, 3).</p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.vmap","title":"vmap  <code>cached</code> <code>property</code>","text":"<pre><code>vmap: EnergyFnOptional\n</code></pre> <p>(C, 4, 3) -&gt; (C,).</p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.__add__","title":"__add__","text":"<pre><code>__add__(other: EnergyFn | CellEnergy) -&gt; CellEnergy\n</code></pre>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.__call__","title":"__call__","text":"<pre><code>__call__(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike] = {},\n    cell_data: Mapping[str, ArrayLike] = {},\n    field_data: Mapping[str, ArrayLike] = {},\n) -&gt; Array\n</code></pre> <p>(4, 3) -&gt; ().</p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.CellEnergy.__init__","title":"__init__","text":"<pre><code>__init__(fn: EnergyFn | CellEnergy) -&gt; None\n</code></pre>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.EnergyFn","title":"EnergyFn","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.EnergyFn.__call__","title":"__call__","text":"<pre><code>__call__(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike],\n    cell_data: Mapping[str, ArrayLike],\n    field_data: Mapping[str, ArrayLike],\n) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.EnergyFnOptional","title":"EnergyFnOptional","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.EnergyFnOptional.__call__","title":"__call__","text":"<pre><code>__call__(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike] = {},\n    cell_data: Mapping[str, ArrayLike] = {},\n    field_data: Mapping[str, ArrayLike] = {},\n) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/energy/#mkit.physics.energy.cell_energy","title":"cell_energy","text":"<pre><code>cell_energy(fn: EnergyFn) -&gt; CellEnergy\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/","title":"mkit.physics.energy.elastic","text":""},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.Material","title":"Material  <code>dataclass</code>","text":""},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.Material.cell_data","title":"cell_data  <code>instance-attribute</code>","text":"<pre><code>cell_data: dict[str, float]\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.Material.energy_fn","title":"energy_fn  <code>instance-attribute</code>","text":"<pre><code>energy_fn: CellEnergy\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.Material.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: str\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.Material.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.Material.__init__","title":"__init__","text":"<pre><code>__init__(\n    id: str,\n    name: str,\n    energy_fn: CellEnergy,\n    cell_data: dict[str, float],\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.corotated","title":"corotated","text":"<pre><code>corotated(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike],\n    cell_data: Mapping[str, ArrayLike],\n    field_data: Mapping[str, ArrayLike],\n) -&gt; Array\n</code></pre> <p>Corotated (Stomakhin 2012).</p> Reference <ol> <li>Chen, Yizhou, et al. \"Position-Based Nonlinear Gauss-Seidel for Quasistatic Hyperelasticity.\" arXiv preprint arXiv:2306.09021 (2023).</li> <li>Stomakhin, Alexey, et al. \"Energetically Consistent Invertible Elasticity.\" Symposium on Computer Animation. Vol. 1. No. 2. 2012.</li> </ol>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.get_preset","title":"get_preset","text":"<pre><code>get_preset(_id: str) -&gt; Material\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.linear","title":"linear","text":"<pre><code>linear(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike],\n    cell_data: Mapping[str, ArrayLike],\n    field_data: Mapping[str, ArrayLike],\n) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.neo_hookean","title":"neo_hookean","text":"<pre><code>neo_hookean(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike],\n    cell_data: Mapping[str, ArrayLike],\n    field_data: Mapping[str, ArrayLike],\n) -&gt; Array\n</code></pre> <p>Neo-Hookean (Macklin 2021).</p> Reference <ol> <li>Chen, Yizhou, et al. \"Position-Based Nonlinear Gauss-Seidel for Quasistatic Hyperelasticity.\" arXiv preprint arXiv:2306.09021 (2023).</li> <li>Macklin, Miles, and Matthias Muller. \"A constraint-based formulation of stable neo-hookean materials.\" Proceedings of the 14th ACM SIGGRAPH conference on motion, interaction and games. 2021.</li> </ol>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.presets","title":"presets","text":"<pre><code>presets() -&gt; dict[str, Material]\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.saint_venant_kirchhoff","title":"saint_venant_kirchhoff","text":"<pre><code>saint_venant_kirchhoff(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike],\n    cell_data: Mapping[str, ArrayLike],\n    field_data: Mapping[str, ArrayLike],\n) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/energy/elastic/#mkit.physics.energy.elastic.stable_neo_hookean","title":"stable_neo_hookean","text":"<pre><code>stable_neo_hookean(\n    disp: ArrayLike,\n    points: ArrayLike,\n    point_data: Mapping[str, ArrayLike],\n    cell_data: Mapping[str, ArrayLike],\n    field_data: Mapping[str, ArrayLike],\n) -&gt; Array\n</code></pre> <p>Stable Neo-Hookean (Smith 2018).</p> Reference <ol> <li>Chen, Yizhou, et al. \"Position-Based Nonlinear Gauss-Seidel for Quasistatic Hyperelasticity.\" arXiv preprint arXiv:2306.09021 (2023).</li> <li>Smith, Breannan, Fernando De Goes, and Theodore Kim. \"Stable neo-hookean flesh simulation.\" ACM Transactions on Graphics (TOG) 37.2 (2018): 1-15.</li> </ol>"},{"location":"api/mkit/physics/model/","title":"mkit.physics.model","text":""},{"location":"api/mkit/physics/model/#mkit.physics.model.Model","title":"Model","text":""},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.cell_data","title":"cell_data  <code>property</code>","text":"<pre><code>cell_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.cell_volume","title":"cell_volume  <code>property</code>","text":"<pre><code>cell_volume: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.energy_fn","title":"energy_fn  <code>instance-attribute</code>","text":"<pre><code>energy_fn: CellEnergy = CellEnergy(energy_fn)\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.energy_hess_coords","title":"energy_hess_coords  <code>cached</code> <code>property</code>","text":"<pre><code>energy_hess_coords: NDArray[integer]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.field_data","title":"field_data  <code>property</code>","text":"<pre><code>field_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.mesh","title":"mesh  <code>instance-attribute</code>","text":"<pre><code>mesh: UnstructuredGrid = as_unstructured_grid(mesh)\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.n_cells","title":"n_cells  <code>property</code>","text":"<pre><code>n_cells: int\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.n_points","title":"n_points  <code>property</code>","text":"<pre><code>n_points: int\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.point_data","title":"point_data  <code>property</code>","text":"<pre><code>point_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.point_data_vmap","title":"point_data_vmap  <code>property</code>","text":"<pre><code>point_data_vmap: dict[str, Array]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.points","title":"points  <code>property</code>","text":"<pre><code>points: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.points_vmap","title":"points_vmap  <code>property</code>","text":"<pre><code>points_vmap: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.tetra","title":"tetra  <code>property</code>","text":"<pre><code>tetra: NDArray[integer]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.__init__","title":"__init__","text":"<pre><code>__init__(\n    mesh: AnyTetMesh, energy_fn: CellEnergy | EnergyFn\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.energy","title":"energy","text":"<pre><code>energy(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.energy_density","title":"energy_density","text":"<pre><code>energy_density(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.energy_hess","title":"energy_hess","text":"<pre><code>energy_hess(disp: ArrayLike) -&gt; COO\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.energy_jac","title":"energy_jac","text":"<pre><code>energy_jac(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Model.make_disp_vmap","title":"make_disp_vmap","text":"<pre><code>make_disp_vmap(disp: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem","title":"Problem","text":""},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.free_mask","title":"free_mask  <code>property</code>","text":"<pre><code>free_mask: NDArray[bool]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.model","title":"model  <code>instance-attribute</code>","text":"<pre><code>model: Model = Model(mesh, energy_fn)\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.n_free","title":"n_free  <code>property</code>","text":"<pre><code>n_free: int\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.n_pin","title":"n_pin  <code>property</code>","text":"<pre><code>n_pin: int\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.n_points","title":"n_points  <code>property</code>","text":"<pre><code>n_points: int\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.pin_disp","title":"pin_disp  <code>instance-attribute</code>","text":"<pre><code>pin_disp: NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.pin_mask","title":"pin_mask  <code>instance-attribute</code>","text":"<pre><code>pin_mask: NDArray[bool]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.point_data","title":"point_data  <code>property</code>","text":"<pre><code>point_data: DataSetAttributes\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.__init__","title":"__init__","text":"<pre><code>__init__(\n    mesh: AnyTetMesh,\n    energy_fn: CellEnergy | EnergyFn,\n    *,\n    pin_disp: ArrayLike | None = None,\n    pin_mask: ArrayLike | None = None\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.fun","title":"fun","text":"<pre><code>fun(x: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.hess","title":"hess","text":"<pre><code>hess(x: ArrayLike) -&gt; coo_matrix\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.jac","title":"jac","text":"<pre><code>jac(x: ArrayLike) -&gt; Array\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.make_disp","title":"make_disp","text":"<pre><code>make_disp(x: ArrayLike) -&gt; NDArray[floating]\n</code></pre>"},{"location":"api/mkit/physics/model/#mkit.physics.model.Problem.solve","title":"solve","text":"<pre><code>solve() -&gt; OptimizeResult\n</code></pre>"},{"location":"api/mkit/plot/","title":"mkit.plot","text":""},{"location":"api/mkit/plot/#mkit.plot.CameraParams","title":"CameraParams","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/mkit/plot/#mkit.plot.CameraParams.focal_point","title":"focal_point  <code>instance-attribute</code>","text":"<pre><code>focal_point: list[float]\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.CameraParams.parallel_projection","title":"parallel_projection  <code>instance-attribute</code>","text":"<pre><code>parallel_projection: bool\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.CameraParams.parallel_scale","title":"parallel_scale  <code>instance-attribute</code>","text":"<pre><code>parallel_scale: float\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.CameraParams.position","title":"position  <code>instance-attribute</code>","text":"<pre><code>position: list[float]\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.CameraParams.up","title":"up  <code>instance-attribute</code>","text":"<pre><code>up: list[float]\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.CameraParams.view_angle","title":"view_angle  <code>instance-attribute</code>","text":"<pre><code>view_angle: float\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.CameraParams.window_size","title":"window_size  <code>instance-attribute</code>","text":"<pre><code>window_size: list[int]\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.load_camera","title":"load_camera","text":"<pre><code>load_camera(pl: Plotter, fpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/plot/#mkit.plot.save_camera","title":"save_camera","text":"<pre><code>save_camera(pl: Plotter, fpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/typing/","title":"mkit.typing","text":""},{"location":"api/mkit/typing/#mkit.typing.AnyMesh","title":"AnyMesh  <code>module-attribute</code>","text":"<pre><code>AnyMesh = AnySurfaceMesh | AnyVolumeMesh\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AnyPointCloud","title":"AnyPointCloud  <code>module-attribute</code>","text":"<pre><code>AnyPointCloud = Any\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AnyPointSet","title":"AnyPointSet  <code>module-attribute</code>","text":"<pre><code>AnyPointSet = AnyPointCloud | AnyMesh\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AnyQuadMesh","title":"AnyQuadMesh  <code>module-attribute</code>","text":"<pre><code>AnyQuadMesh = Any\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AnySurfaceMesh","title":"AnySurfaceMesh  <code>module-attribute</code>","text":"<pre><code>AnySurfaceMesh = AnyTriMesh | AnyQuadMesh\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AnyTetMesh","title":"AnyTetMesh  <code>module-attribute</code>","text":"<pre><code>AnyTetMesh = Any\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AnyTriMesh","title":"AnyTriMesh  <code>module-attribute</code>","text":"<pre><code>AnyTriMesh = Any\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AnyVolumeMesh","title":"AnyVolumeMesh  <code>module-attribute</code>","text":"<pre><code>AnyVolumeMesh = AnyTetMesh\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AttributeArray","title":"AttributeArray  <code>module-attribute</code>","text":"<pre><code>AttributeArray = Shaped[ndarray, 'N ...']\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.AttributesLike","title":"AttributesLike  <code>module-attribute</code>","text":"<pre><code>AttributesLike = (\n    Mapping[str, Shaped[ArrayLike, \"N ...\"]]\n    | DataSetAttributes\n)\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.StrPath","title":"StrPath  <code>module-attribute</code>","text":"<pre><code>StrPath = str | PathLike[str]\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.full_name","title":"full_name","text":"<pre><code>full_name(obj: Any) -&gt; str\n</code></pre> <p>Returns the fully qualified name of the given object.</p> <p>Parameters:</p> <ul> <li> <code>obj</code>               (<code>Any</code>)           \u2013            <p>The object whose fully qualified name is to be returned.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The fully qualified name of the object.</p> </li> </ul> Reference <ol> <li>https://stackoverflow.com/a/2020083/18410348</li> </ol>"},{"location":"api/mkit/typing/#mkit.typing.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_class_named","title":"is_class_named","text":"<pre><code>is_class_named(\n    cls: type, name: str | Sequence[str]\n) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_class_named_partial","title":"is_class_named_partial","text":"<pre><code>is_class_named_partial(\n    cls: type, name: str | Sequence[str]\n) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_instance_named","title":"is_instance_named","text":"<pre><code>is_instance_named(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_instance_named_partial","title":"is_instance_named_partial","text":"<pre><code>is_instance_named_partial(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_named","title":"is_named","text":"<pre><code>is_named(obj: Any, name: str | Sequence[str]) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_named_partial","title":"is_named_partial","text":"<pre><code>is_named_partial(\n    obj: Any, name: str | Sequence[str]\n) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre>"},{"location":"api/mkit/typing/#mkit.typing.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre>"},{"location":"api/mkit/typing/jax/","title":"mkit.typing.jax","text":""},{"location":"api/mkit/typing/array/","title":"mkit.typing.array","text":""},{"location":"api/mkit/typing/array/#mkit.typing.array.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.F3Like","title":"F3Like  <code>module-attribute</code>","text":"<pre><code>F3Like = Float[ArrayLike, '3']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.F4Like","title":"F4Like  <code>module-attribute</code>","text":"<pre><code>F4Like = Float[ArrayLike, '4']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.FMN3Like","title":"FMN3Like  <code>module-attribute</code>","text":"<pre><code>FMN3Like = Float[ArrayLike, 'M N 3']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.I2Like","title":"I2Like  <code>module-attribute</code>","text":"<pre><code>I2Like = Integer[ArrayLike, '2']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.I3Like","title":"I3Like  <code>module-attribute</code>","text":"<pre><code>I3Like = Integer[ArrayLike, '3']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.I4Like","title":"I4Like  <code>module-attribute</code>","text":"<pre><code>I4Like = Integer[ArrayLike, '4']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.IN2Like","title":"IN2Like  <code>module-attribute</code>","text":"<pre><code>IN2Like = Integer[ArrayLike, 'N 2']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/array/#mkit.typing.array.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/jax/","title":"Index","text":""},{"location":"api/mkit/typing/numpy/","title":"mkit.typing.numpy","text":""},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[ndarray, '']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[ndarray, 'N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[ndarray, '']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F3","title":"F3  <code>module-attribute</code>","text":"<pre><code>F3 = Float[ndarray, '3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[ndarray, '3 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[ndarray, '3 4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F3Like","title":"F3Like  <code>module-attribute</code>","text":"<pre><code>F3Like = Float[ArrayLike, '3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F4","title":"F4  <code>module-attribute</code>","text":"<pre><code>F4 = Float[ndarray, '4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[ndarray, '4 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[ndarray, '4 4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.F4Like","title":"F4Like  <code>module-attribute</code>","text":"<pre><code>F4Like = Float[ArrayLike, '4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[ndarray, 'M N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FMN3","title":"FMN3  <code>module-attribute</code>","text":"<pre><code>FMN3 = Float[ndarray, 'M N 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FMN3Like","title":"FMN3Like  <code>module-attribute</code>","text":"<pre><code>FMN3Like = Float[ArrayLike, 'M N 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[ndarray, 'N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[ndarray, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[ndarray, 'N N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[ndarray, '']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.I2","title":"I2  <code>module-attribute</code>","text":"<pre><code>I2 = Integer[ndarray, '2']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.I2Like","title":"I2Like  <code>module-attribute</code>","text":"<pre><code>I2Like = Integer[ArrayLike, '2']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.I3","title":"I3  <code>module-attribute</code>","text":"<pre><code>I3 = Integer[ndarray, '3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.I3Like","title":"I3Like  <code>module-attribute</code>","text":"<pre><code>I3Like = Integer[ArrayLike, '3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.I4","title":"I4  <code>module-attribute</code>","text":"<pre><code>I4 = Integer[ndarray, '4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.I4Like","title":"I4Like  <code>module-attribute</code>","text":"<pre><code>I4Like = Integer[ArrayLike, '4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[ndarray, 'N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.IN2","title":"IN2  <code>module-attribute</code>","text":"<pre><code>IN2 = Integer[ndarray, 'N 2']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.IN2Like","title":"IN2Like  <code>module-attribute</code>","text":"<pre><code>IN2Like = Integer[ArrayLike, 'N 2']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[ndarray, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[ndarray, 'N 4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/numpy/#mkit.typing.numpy.is_numpy","title":"is_numpy","text":"<pre><code>is_numpy(obj: Any) -&gt; TypeGuard[ndarray]\n</code></pre>"},{"location":"api/mkit/typing/torch/","title":"mkit.typing.torch","text":""},{"location":"api/mkit/typing/torch/#mkit.typing.torch.ArrayLike","title":"ArrayLike  <code>module-attribute</code>","text":"<pre><code>ArrayLike = ArrayLike | ArrayLike\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.B","title":"B  <code>module-attribute</code>","text":"<pre><code>B = Bool[Tensor, '']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.BLike","title":"BLike  <code>module-attribute</code>","text":"<pre><code>BLike = Bool[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.BN","title":"BN  <code>module-attribute</code>","text":"<pre><code>BN = Bool[Tensor, 'N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.BNLike","title":"BNLike  <code>module-attribute</code>","text":"<pre><code>BNLike = Bool[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F","title":"F  <code>module-attribute</code>","text":"<pre><code>F = Float[Tensor, '']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F3","title":"F3  <code>module-attribute</code>","text":"<pre><code>F3 = Float[Tensor, '3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F33","title":"F33  <code>module-attribute</code>","text":"<pre><code>F33 = Float[Tensor, '3 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F33Like","title":"F33Like  <code>module-attribute</code>","text":"<pre><code>F33Like = Float[ArrayLike, '3 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F34","title":"F34  <code>module-attribute</code>","text":"<pre><code>F34 = Float[Tensor, '3 4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F34Like","title":"F34Like  <code>module-attribute</code>","text":"<pre><code>F34Like = Float[ArrayLike, '3 4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F3Like","title":"F3Like  <code>module-attribute</code>","text":"<pre><code>F3Like = Float[ArrayLike, '3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F4","title":"F4  <code>module-attribute</code>","text":"<pre><code>F4 = Float[Tensor, '4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F43","title":"F43  <code>module-attribute</code>","text":"<pre><code>F43 = Float[Tensor, '4 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F43Like","title":"F43Like  <code>module-attribute</code>","text":"<pre><code>F43Like = Float[ArrayLike, '4 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F44","title":"F44  <code>module-attribute</code>","text":"<pre><code>F44 = Float[Tensor, '4 4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F44Like","title":"F44Like  <code>module-attribute</code>","text":"<pre><code>F44Like = Float[ArrayLike, '4 4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.F4Like","title":"F4Like  <code>module-attribute</code>","text":"<pre><code>F4Like = Float[ArrayLike, '4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FLike","title":"FLike  <code>module-attribute</code>","text":"<pre><code>FLike = Float[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FMN","title":"FMN  <code>module-attribute</code>","text":"<pre><code>FMN = Float[Tensor, 'M N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FMN3","title":"FMN3  <code>module-attribute</code>","text":"<pre><code>FMN3 = Float[Tensor, 'M N 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FMN3Like","title":"FMN3Like  <code>module-attribute</code>","text":"<pre><code>FMN3Like = Float[ArrayLike, 'M N 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FMNLike","title":"FMNLike  <code>module-attribute</code>","text":"<pre><code>FMNLike = Float[ArrayLike, 'M N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FN","title":"FN  <code>module-attribute</code>","text":"<pre><code>FN = Float[Tensor, 'N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FN3","title":"FN3  <code>module-attribute</code>","text":"<pre><code>FN3 = Float[Tensor, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FN3Like","title":"FN3Like  <code>module-attribute</code>","text":"<pre><code>FN3Like = Float[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FNLike","title":"FNLike  <code>module-attribute</code>","text":"<pre><code>FNLike = Float[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FNN","title":"FNN  <code>module-attribute</code>","text":"<pre><code>FNN = Float[Tensor, 'N N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.FNNLike","title":"FNNLike  <code>module-attribute</code>","text":"<pre><code>FNNLike = Float[ArrayLike, 'N N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.I","title":"I  <code>module-attribute</code>","text":"<pre><code>I = Integer[Tensor, '']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.I2","title":"I2  <code>module-attribute</code>","text":"<pre><code>I2 = Integer[Tensor, '2']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.I2Like","title":"I2Like  <code>module-attribute</code>","text":"<pre><code>I2Like = Integer[ArrayLike, '2']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.I3","title":"I3  <code>module-attribute</code>","text":"<pre><code>I3 = Integer[Tensor, '3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.I3Like","title":"I3Like  <code>module-attribute</code>","text":"<pre><code>I3Like = Integer[ArrayLike, '3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.I4","title":"I4  <code>module-attribute</code>","text":"<pre><code>I4 = Integer[Tensor, '4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.I4Like","title":"I4Like  <code>module-attribute</code>","text":"<pre><code>I4Like = Integer[ArrayLike, '4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.ILike","title":"ILike  <code>module-attribute</code>","text":"<pre><code>ILike = Integer[ArrayLike, '']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.IN","title":"IN  <code>module-attribute</code>","text":"<pre><code>IN = Integer[Tensor, 'N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.IN2","title":"IN2  <code>module-attribute</code>","text":"<pre><code>IN2 = Integer[Tensor, 'N 2']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.IN2Like","title":"IN2Like  <code>module-attribute</code>","text":"<pre><code>IN2Like = Integer[ArrayLike, 'N 2']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.IN3","title":"IN3  <code>module-attribute</code>","text":"<pre><code>IN3 = Integer[Tensor, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.IN3Like","title":"IN3Like  <code>module-attribute</code>","text":"<pre><code>IN3Like = Integer[ArrayLike, 'N 3']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.IN4","title":"IN4  <code>module-attribute</code>","text":"<pre><code>IN4 = Integer[Tensor, 'N 4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.IN4Like","title":"IN4Like  <code>module-attribute</code>","text":"<pre><code>IN4Like = Integer[ArrayLike, 'N 4']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.INLike","title":"INLike  <code>module-attribute</code>","text":"<pre><code>INLike = Integer[ArrayLike, 'N']\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.is_array_like","title":"is_array_like","text":"<pre><code>is_array_like(obj: Any) -&gt; bool\n</code></pre>"},{"location":"api/mkit/typing/torch/#mkit.typing.torch.is_torch","title":"is_torch","text":"<pre><code>is_torch(obj: Any) -&gt; TypeGuard[Tensor]\n</code></pre>"},{"location":"api/mkit/utils/","title":"mkit.utils","text":""},{"location":"api/mkit/utils/#mkit.utils.Live","title":"Live","text":""},{"location":"api/mkit/utils/#mkit.utils.Live.enable","title":"enable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enable: bool = enable\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.records","title":"records  <code>instance-attribute</code>","text":"<pre><code>records: dict[int, dict[str, Any]] = defaultdict(dict)\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.step","title":"step  <code>property</code> <code>writable</code>","text":"<pre><code>step: int\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; Self\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    cache_images: bool = False,\n    dir: str = \"dvclive\",\n    dvcyaml: str | None = \"dvc.yaml\",\n    enable: bool = True,\n    exp_message: str | None = None,\n    exp_name: str | None = None,\n    monitor_system: bool = False,\n    report: Literal[\"md\", \"notebook\", \"html\", None] = None,\n    resume: bool = False,\n    save_dvc_exp: bool = True\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.end","title":"end","text":"<pre><code>end() -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.log_array","title":"log_array","text":"<pre><code>log_array(name: str, array: ArrayLike) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    val: Any,\n    *,\n    timestamp: bool = False,\n    plot: bool = True\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.Live.next_step","title":"next_step","text":"<pre><code>next_step(*, milestone: bool = True) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.flatten","title":"flatten","text":"<pre><code>flatten(\n    iterable: _T | Iterable[_T | Iterable],\n    base_type: tuple[type, ...] = (str, type),\n) -&gt; Iterable[_T]\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.is_subsequence","title":"is_subsequence","text":"<pre><code>is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.kwargs_to_positional","title":"kwargs_to_positional","text":"<pre><code>kwargs_to_positional(\n    func: Callable[_P, _T]\n) -&gt; Callable[_P, _T]\n</code></pre> <p>Convert **kwargs arguments to positional.</p> Reference <ol> <li>https://stackoverflow.com/a/49836730/18410348</li> </ol>"},{"location":"api/mkit/utils/#mkit.utils.load","title":"load","text":"<pre><code>load(\n    fpath: StrPath, ext: str | None = None, **kwargs\n) -&gt; Any\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.load_json","title":"load_json","text":"<pre><code>load_json(fpath: StrPath, **kwargs) -&gt; Any\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.load_pydantic","title":"load_pydantic","text":"<pre><code>load_pydantic(\n    cls: type[_C],\n    fpath: StrPath,\n    ext: str | None = None,\n    **kwargs\n) -&gt; _C\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.load_toml","title":"load_toml","text":"<pre><code>load_toml(fpath: StrPath) -&gt; TOMLDocument\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.load_yaml","title":"load_yaml","text":"<pre><code>load_yaml(fpath: StrPath) -&gt; Any\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.merge_mapping","title":"merge_mapping","text":"<pre><code>merge_mapping(origin: Mapping, update: Mapping) -&gt; dict\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.save","title":"save","text":"<pre><code>save(\n    data: Any,\n    fpath: StrPath,\n    ext: str | None = None,\n    **kwargs\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.save_json","title":"save_json","text":"<pre><code>save_json(data: Any, fpath: StrPath, **kwargs) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.save_pydantic","title":"save_pydantic","text":"<pre><code>save_pydantic(\n    data: BaseModel,\n    fpath: StrPath,\n    ext: str | None = None,\n    **kwargs\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.save_toml","title":"save_toml","text":"<pre><code>save_toml(\n    data: Any, fpath: StrPath, *, sort_keys: bool = False\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.save_yaml","title":"save_yaml","text":"<pre><code>save_yaml(data: Any, fpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/#mkit.utils.strip_comments","title":"strip_comments","text":"<pre><code>strip_comments(\n    text: str, comments: str = \"#\"\n) -&gt; Generator[str, None, None]\n</code></pre>"},{"location":"api/mkit/utils/func/","title":"mkit.utils.func","text":""},{"location":"api/mkit/utils/func/#mkit.utils.func.kwargs_to_positional","title":"kwargs_to_positional","text":"<pre><code>kwargs_to_positional(\n    func: Callable[_P, _T]\n) -&gt; Callable[_P, _T]\n</code></pre> <p>Convert **kwargs arguments to positional.</p> Reference <ol> <li>https://stackoverflow.com/a/49836730/18410348</li> </ol>"},{"location":"api/mkit/utils/iter/","title":"mkit.utils.iter","text":""},{"location":"api/mkit/utils/iter/#mkit.utils.iter.flatten","title":"flatten","text":"<pre><code>flatten(\n    iterable: _T | Iterable[_T | Iterable],\n    base_type: tuple[type, ...] = (str, type),\n) -&gt; Iterable[_T]\n</code></pre>"},{"location":"api/mkit/utils/iter/#mkit.utils.iter.is_subsequence","title":"is_subsequence","text":"<pre><code>is_subsequence(a: Sequence[Any], b: Sequence[Any]) -&gt; bool\n</code></pre>"},{"location":"api/mkit/utils/iter/#mkit.utils.iter.merge_mapping","title":"merge_mapping","text":"<pre><code>merge_mapping(origin: Mapping, update: Mapping) -&gt; dict\n</code></pre>"},{"location":"api/mkit/utils/live/","title":"mkit.utils.live","text":""},{"location":"api/mkit/utils/live/#mkit.utils.live.Live","title":"Live","text":""},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.enable","title":"enable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>enable: bool = enable\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.records","title":"records  <code>instance-attribute</code>","text":"<pre><code>records: dict[int, dict[str, Any]] = defaultdict(dict)\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.step","title":"step  <code>property</code> <code>writable</code>","text":"<pre><code>step: int\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.__enter__","title":"__enter__","text":"<pre><code>__enter__() -&gt; Self\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_val, exc_tb) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.__init__","title":"__init__","text":"<pre><code>__init__(\n    *,\n    cache_images: bool = False,\n    dir: str = \"dvclive\",\n    dvcyaml: str | None = \"dvc.yaml\",\n    enable: bool = True,\n    exp_message: str | None = None,\n    exp_name: str | None = None,\n    monitor_system: bool = False,\n    report: Literal[\"md\", \"notebook\", \"html\", None] = None,\n    resume: bool = False,\n    save_dvc_exp: bool = True\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.end","title":"end","text":"<pre><code>end() -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.log_array","title":"log_array","text":"<pre><code>log_array(name: str, array: ArrayLike) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.log_metric","title":"log_metric","text":"<pre><code>log_metric(\n    name: str,\n    val: Any,\n    *,\n    timestamp: bool = False,\n    plot: bool = True\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/live/#mkit.utils.live.Live.next_step","title":"next_step","text":"<pre><code>next_step(*, milestone: bool = True) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/serialize/","title":"mkit.utils.serialize","text":""},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.load","title":"load","text":"<pre><code>load(\n    fpath: StrPath, ext: str | None = None, **kwargs\n) -&gt; Any\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.load_json","title":"load_json","text":"<pre><code>load_json(fpath: StrPath, **kwargs) -&gt; Any\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.load_pydantic","title":"load_pydantic","text":"<pre><code>load_pydantic(\n    cls: type[_C],\n    fpath: StrPath,\n    ext: str | None = None,\n    **kwargs\n) -&gt; _C\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.load_toml","title":"load_toml","text":"<pre><code>load_toml(fpath: StrPath) -&gt; TOMLDocument\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.load_yaml","title":"load_yaml","text":"<pre><code>load_yaml(fpath: StrPath) -&gt; Any\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.save","title":"save","text":"<pre><code>save(\n    data: Any,\n    fpath: StrPath,\n    ext: str | None = None,\n    **kwargs\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.save_json","title":"save_json","text":"<pre><code>save_json(data: Any, fpath: StrPath, **kwargs) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.save_pydantic","title":"save_pydantic","text":"<pre><code>save_pydantic(\n    data: BaseModel,\n    fpath: StrPath,\n    ext: str | None = None,\n    **kwargs\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.save_toml","title":"save_toml","text":"<pre><code>save_toml(\n    data: Any, fpath: StrPath, *, sort_keys: bool = False\n) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/serialize/#mkit.utils.serialize.save_yaml","title":"save_yaml","text":"<pre><code>save_yaml(data: Any, fpath: StrPath) -&gt; None\n</code></pre>"},{"location":"api/mkit/utils/text/","title":"mkit.utils.text","text":""},{"location":"api/mkit/utils/text/#mkit.utils.text.strip_comments","title":"strip_comments","text":"<pre><code>strip_comments(\n    text: str, comments: str = \"#\"\n) -&gt; Generator[str, None, None]\n</code></pre>"}]}